/*
 * Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
 * 
 * On Sat Nov 16 22:39:52 EST 2019
 * 
 */
#include "bluesim_primitives.h"
#include "mkMyDutIndicationOutputPipes.h"


/* Literal declarations */
static unsigned int const UWide_literal_512_h0_arr[] = { 0u,
							 0u,
							 0u,
							 0u,
							 0u,
							 0u,
							 0u,
							 0u,
							 0u,
							 0u,
							 0u,
							 0u,
							 0u,
							 0u,
							 0u,
							 0u };
static tUWide const UWide_literal_512_h0(512u, UWide_literal_512_h0_arr);


/* Constructor */
MOD_mkMyDutIndicationOutputPipes::MOD_mkMyDutIndicationOutputPipes(tSimStateHdl simHdl,
								   char const *name,
								   Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_returnOutputDDR_responseAdapter_bits(simHdl,
					      "returnOutputDDR_responseAdapter_bits",
					      this,
					      512u,
					      UWide_literal_512_h0,
					      (tUInt8)0u),
    INST_returnOutputDDR_responseAdapter_count(simHdl,
					       "returnOutputDDR_responseAdapter_count",
					       this,
					       4u,
					       (tUInt8)0u,
					       (tUInt8)0u),
    INST_returnOutputDDR_responseAdapter_notEmptyReg(simHdl,
						     "returnOutputDDR_responseAdapter_notEmptyReg",
						     this,
						     1u,
						     (tUInt8)0u,
						     (tUInt8)0u),
    INST_returnOutputDDR_responseAdapter_shift(simHdl,
					       "returnOutputDDR_responseAdapter_shift",
					       this,
					       10u,
					       0u,
					       (tUInt8)0u),
    INST_returnOutputSV_responseAdapter_bits(simHdl,
					     "returnOutputSV_responseAdapter_bits",
					     this,
					     32u,
					     0u,
					     (tUInt8)0u),
    INST_returnOutputSV_responseAdapter_notEmptyReg(simHdl,
						    "returnOutputSV_responseAdapter_notEmptyReg",
						    this,
						    1u,
						    (tUInt8)0u,
						    (tUInt8)0u),
    INST_returnOutputSV_responseAdapter_shift(simHdl,
					      "returnOutputSV_responseAdapter_shift",
					      this,
					      6u,
					      (tUInt8)0u,
					      (tUInt8)0u),
    PORT_RST_N((tUInt8)1u),
    DEF_x__h659(512u),
    DEF_returnOutputDDR_responseAdapter_bits_BITS_479_TO_0___h771(480u),
    DEF_x__h763(512u)
{
  PORT_EN_portalIfc_indications_0_deq = false;
  PORT_EN_portalIfc_indications_1_deq = false;
  PORT_EN_methods_returnOutputDDR_enq = false;
  PORT_EN_methods_returnOutputSV_enq = false;
  PORT_portalIfc_messageSize_size_methodNumber = 0u;
  PORT_methods_returnOutputDDR_enq_v.setSize(512u);
  PORT_methods_returnOutputDDR_enq_v.clear();
  PORT_methods_returnOutputSV_enq_v = 0u;
  PORT_portalIfc_intr_channel = 0u;
  PORT_portalIfc_intr_status = false;
  PORT_portalIfc_messageSize_size = 0u;
  PORT_RDY_portalIfc_messageSize_size = false;
  PORT_RDY_portalIfc_intr_status = false;
  PORT_RDY_portalIfc_intr_channel = false;
  PORT_portalIfc_indications_0_first = 0u;
  PORT_RDY_portalIfc_indications_0_first = false;
  PORT_RDY_portalIfc_indications_0_deq = false;
  PORT_portalIfc_indications_0_notEmpty = false;
  PORT_RDY_portalIfc_indications_0_notEmpty = false;
  PORT_portalIfc_indications_1_first = 0u;
  PORT_RDY_portalIfc_indications_1_first = false;
  PORT_RDY_portalIfc_indications_1_deq = false;
  PORT_portalIfc_indications_1_notEmpty = false;
  PORT_RDY_portalIfc_indications_1_notEmpty = false;
  PORT_RDY_methods_returnOutputDDR_enq = false;
  PORT_methods_returnOutputDDR_notFull = false;
  PORT_RDY_methods_returnOutputDDR_notFull = false;
  PORT_RDY_methods_returnOutputSV_enq = false;
  PORT_methods_returnOutputSV_notFull = false;
  PORT_RDY_methods_returnOutputSV_notFull = false;
  symbol_count = 55u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkMyDutIndicationOutputPipes::init_symbols_0()
{
  init_symbol(&symbols[0u],
	      "CAN_FIRE_methods_returnOutputDDR_enq",
	      SYM_DEF,
	      &DEF_CAN_FIRE_methods_returnOutputDDR_enq,
	      1u);
  init_symbol(&symbols[1u],
	      "CAN_FIRE_methods_returnOutputDDR_notFull",
	      SYM_DEF,
	      &DEF_CAN_FIRE_methods_returnOutputDDR_notFull,
	      1u);
  init_symbol(&symbols[2u],
	      "CAN_FIRE_methods_returnOutputSV_enq",
	      SYM_DEF,
	      &DEF_CAN_FIRE_methods_returnOutputSV_enq,
	      1u);
  init_symbol(&symbols[3u],
	      "CAN_FIRE_methods_returnOutputSV_notFull",
	      SYM_DEF,
	      &DEF_CAN_FIRE_methods_returnOutputSV_notFull,
	      1u);
  init_symbol(&symbols[4u],
	      "CAN_FIRE_portalIfc_indications_0_deq",
	      SYM_DEF,
	      &DEF_CAN_FIRE_portalIfc_indications_0_deq,
	      1u);
  init_symbol(&symbols[5u],
	      "CAN_FIRE_portalIfc_indications_0_first",
	      SYM_DEF,
	      &DEF_CAN_FIRE_portalIfc_indications_0_first,
	      1u);
  init_symbol(&symbols[6u],
	      "CAN_FIRE_portalIfc_indications_0_notEmpty",
	      SYM_DEF,
	      &DEF_CAN_FIRE_portalIfc_indications_0_notEmpty,
	      1u);
  init_symbol(&symbols[7u],
	      "CAN_FIRE_portalIfc_indications_1_deq",
	      SYM_DEF,
	      &DEF_CAN_FIRE_portalIfc_indications_1_deq,
	      1u);
  init_symbol(&symbols[8u],
	      "CAN_FIRE_portalIfc_indications_1_first",
	      SYM_DEF,
	      &DEF_CAN_FIRE_portalIfc_indications_1_first,
	      1u);
  init_symbol(&symbols[9u],
	      "CAN_FIRE_portalIfc_indications_1_notEmpty",
	      SYM_DEF,
	      &DEF_CAN_FIRE_portalIfc_indications_1_notEmpty,
	      1u);
  init_symbol(&symbols[10u],
	      "CAN_FIRE_portalIfc_intr_channel",
	      SYM_DEF,
	      &DEF_CAN_FIRE_portalIfc_intr_channel,
	      1u);
  init_symbol(&symbols[11u],
	      "CAN_FIRE_portalIfc_intr_status",
	      SYM_DEF,
	      &DEF_CAN_FIRE_portalIfc_intr_status,
	      1u);
  init_symbol(&symbols[12u],
	      "CAN_FIRE_portalIfc_messageSize_size",
	      SYM_DEF,
	      &DEF_CAN_FIRE_portalIfc_messageSize_size,
	      1u);
  init_symbol(&symbols[13u],
	      "EN_methods_returnOutputDDR_enq",
	      SYM_PORT,
	      &PORT_EN_methods_returnOutputDDR_enq,
	      1u);
  init_symbol(&symbols[14u],
	      "EN_methods_returnOutputSV_enq",
	      SYM_PORT,
	      &PORT_EN_methods_returnOutputSV_enq,
	      1u);
  init_symbol(&symbols[15u],
	      "EN_portalIfc_indications_0_deq",
	      SYM_PORT,
	      &PORT_EN_portalIfc_indications_0_deq,
	      1u);
  init_symbol(&symbols[16u],
	      "EN_portalIfc_indications_1_deq",
	      SYM_PORT,
	      &PORT_EN_portalIfc_indications_1_deq,
	      1u);
  init_symbol(&symbols[17u],
	      "methods_returnOutputDDR_enq_v",
	      SYM_PORT,
	      &PORT_methods_returnOutputDDR_enq_v,
	      512u);
  init_symbol(&symbols[18u],
	      "methods_returnOutputDDR_notFull",
	      SYM_PORT,
	      &PORT_methods_returnOutputDDR_notFull,
	      1u);
  init_symbol(&symbols[19u],
	      "methods_returnOutputSV_enq_v",
	      SYM_PORT,
	      &PORT_methods_returnOutputSV_enq_v,
	      32u);
  init_symbol(&symbols[20u],
	      "methods_returnOutputSV_notFull",
	      SYM_PORT,
	      &PORT_methods_returnOutputSV_notFull,
	      1u);
  init_symbol(&symbols[21u],
	      "portalIfc_indications_0_first",
	      SYM_PORT,
	      &PORT_portalIfc_indications_0_first,
	      32u);
  init_symbol(&symbols[22u],
	      "portalIfc_indications_0_notEmpty",
	      SYM_PORT,
	      &PORT_portalIfc_indications_0_notEmpty,
	      1u);
  init_symbol(&symbols[23u],
	      "portalIfc_indications_1_first",
	      SYM_PORT,
	      &PORT_portalIfc_indications_1_first,
	      32u);
  init_symbol(&symbols[24u],
	      "portalIfc_indications_1_notEmpty",
	      SYM_PORT,
	      &PORT_portalIfc_indications_1_notEmpty,
	      1u);
  init_symbol(&symbols[25u], "portalIfc_intr_channel", SYM_PORT, &PORT_portalIfc_intr_channel, 32u);
  init_symbol(&symbols[26u], "portalIfc_intr_status", SYM_PORT, &PORT_portalIfc_intr_status, 1u);
  init_symbol(&symbols[27u],
	      "portalIfc_messageSize_size",
	      SYM_PORT,
	      &PORT_portalIfc_messageSize_size,
	      16u);
  init_symbol(&symbols[28u],
	      "portalIfc_messageSize_size_methodNumber",
	      SYM_PORT,
	      &PORT_portalIfc_messageSize_size_methodNumber,
	      16u);
  init_symbol(&symbols[29u],
	      "RDY_methods_returnOutputDDR_enq",
	      SYM_PORT,
	      &PORT_RDY_methods_returnOutputDDR_enq,
	      1u);
  init_symbol(&symbols[30u],
	      "RDY_methods_returnOutputDDR_notFull",
	      SYM_PORT,
	      &PORT_RDY_methods_returnOutputDDR_notFull,
	      1u);
  init_symbol(&symbols[31u],
	      "RDY_methods_returnOutputSV_enq",
	      SYM_PORT,
	      &PORT_RDY_methods_returnOutputSV_enq,
	      1u);
  init_symbol(&symbols[32u],
	      "RDY_methods_returnOutputSV_notFull",
	      SYM_PORT,
	      &PORT_RDY_methods_returnOutputSV_notFull,
	      1u);
  init_symbol(&symbols[33u],
	      "RDY_portalIfc_indications_0_deq",
	      SYM_PORT,
	      &PORT_RDY_portalIfc_indications_0_deq,
	      1u);
  init_symbol(&symbols[34u],
	      "RDY_portalIfc_indications_0_first",
	      SYM_PORT,
	      &PORT_RDY_portalIfc_indications_0_first,
	      1u);
  init_symbol(&symbols[35u],
	      "RDY_portalIfc_indications_0_notEmpty",
	      SYM_PORT,
	      &PORT_RDY_portalIfc_indications_0_notEmpty,
	      1u);
  init_symbol(&symbols[36u],
	      "RDY_portalIfc_indications_1_deq",
	      SYM_PORT,
	      &PORT_RDY_portalIfc_indications_1_deq,
	      1u);
  init_symbol(&symbols[37u],
	      "RDY_portalIfc_indications_1_first",
	      SYM_PORT,
	      &PORT_RDY_portalIfc_indications_1_first,
	      1u);
  init_symbol(&symbols[38u],
	      "RDY_portalIfc_indications_1_notEmpty",
	      SYM_PORT,
	      &PORT_RDY_portalIfc_indications_1_notEmpty,
	      1u);
  init_symbol(&symbols[39u],
	      "RDY_portalIfc_intr_channel",
	      SYM_PORT,
	      &PORT_RDY_portalIfc_intr_channel,
	      1u);
  init_symbol(&symbols[40u],
	      "RDY_portalIfc_intr_status",
	      SYM_PORT,
	      &PORT_RDY_portalIfc_intr_status,
	      1u);
  init_symbol(&symbols[41u],
	      "RDY_portalIfc_messageSize_size",
	      SYM_PORT,
	      &PORT_RDY_portalIfc_messageSize_size,
	      1u);
  init_symbol(&symbols[42u],
	      "returnOutputDDR_responseAdapter_bits",
	      SYM_MODULE,
	      &INST_returnOutputDDR_responseAdapter_bits);
  init_symbol(&symbols[43u],
	      "returnOutputDDR_responseAdapter_count",
	      SYM_MODULE,
	      &INST_returnOutputDDR_responseAdapter_count);
  init_symbol(&symbols[44u],
	      "returnOutputDDR_responseAdapter_notEmptyReg",
	      SYM_MODULE,
	      &INST_returnOutputDDR_responseAdapter_notEmptyReg);
  init_symbol(&symbols[45u],
	      "returnOutputDDR_responseAdapter_notEmptyReg__h366",
	      SYM_DEF,
	      &DEF_returnOutputDDR_responseAdapter_notEmptyReg__h366,
	      1u);
  init_symbol(&symbols[46u],
	      "returnOutputDDR_responseAdapter_shift",
	      SYM_MODULE,
	      &INST_returnOutputDDR_responseAdapter_shift);
  init_symbol(&symbols[47u],
	      "returnOutputSV_responseAdapter_bits",
	      SYM_MODULE,
	      &INST_returnOutputSV_responseAdapter_bits);
  init_symbol(&symbols[48u],
	      "returnOutputSV_responseAdapter_notEmptyReg",
	      SYM_MODULE,
	      &INST_returnOutputSV_responseAdapter_notEmptyReg);
  init_symbol(&symbols[49u],
	      "returnOutputSV_responseAdapter_notEmptyReg__h465",
	      SYM_DEF,
	      &DEF_returnOutputSV_responseAdapter_notEmptyReg__h465,
	      1u);
  init_symbol(&symbols[50u],
	      "returnOutputSV_responseAdapter_shift",
	      SYM_MODULE,
	      &INST_returnOutputSV_responseAdapter_shift);
  init_symbol(&symbols[51u],
	      "WILL_FIRE_methods_returnOutputDDR_enq",
	      SYM_DEF,
	      &DEF_WILL_FIRE_methods_returnOutputDDR_enq,
	      1u);
  init_symbol(&symbols[52u],
	      "WILL_FIRE_methods_returnOutputSV_enq",
	      SYM_DEF,
	      &DEF_WILL_FIRE_methods_returnOutputSV_enq,
	      1u);
  init_symbol(&symbols[53u],
	      "WILL_FIRE_portalIfc_indications_0_deq",
	      SYM_DEF,
	      &DEF_WILL_FIRE_portalIfc_indications_0_deq,
	      1u);
  init_symbol(&symbols[54u],
	      "WILL_FIRE_portalIfc_indications_1_deq",
	      SYM_DEF,
	      &DEF_WILL_FIRE_portalIfc_indications_1_deq,
	      1u);
}


/* Rule actions */


/* Methods */

tUInt32 MOD_mkMyDutIndicationOutputPipes::METH_portalIfc_messageSize_size(tUInt32 ARG_portalIfc_messageSize_size_methodNumber)
{
  tUInt8 DEF_portalIfc_messageSize_size_methodNumber_EQ_0___d5;
  PORT_portalIfc_messageSize_size_methodNumber = ARG_portalIfc_messageSize_size_methodNumber;
  DEF_portalIfc_messageSize_size_methodNumber_EQ_0___d5 = ARG_portalIfc_messageSize_size_methodNumber == 0u;
  PORT_portalIfc_messageSize_size = DEF_portalIfc_messageSize_size_methodNumber_EQ_0___d5 ? 512u : 32u;
  return PORT_portalIfc_messageSize_size;
}

tUInt8 MOD_mkMyDutIndicationOutputPipes::METH_RDY_portalIfc_messageSize_size()
{
  DEF_CAN_FIRE_portalIfc_messageSize_size = (tUInt8)1u;
  PORT_RDY_portalIfc_messageSize_size = DEF_CAN_FIRE_portalIfc_messageSize_size;
  return PORT_RDY_portalIfc_messageSize_size;
}

void MOD_mkMyDutIndicationOutputPipes::METH_methods_returnOutputDDR_enq(tUWide ARG_methods_returnOutputDDR_enq_v)
{
  PORT_EN_methods_returnOutputDDR_enq = (tUInt8)1u;
  DEF_WILL_FIRE_methods_returnOutputDDR_enq = (tUInt8)1u;
  PORT_methods_returnOutputDDR_enq_v = ARG_methods_returnOutputDDR_enq_v;
  INST_returnOutputDDR_responseAdapter_bits.METH_write(ARG_methods_returnOutputDDR_enq_v);
  INST_returnOutputDDR_responseAdapter_notEmptyReg.METH_write((tUInt8)1u);
}

tUInt8 MOD_mkMyDutIndicationOutputPipes::METH_RDY_methods_returnOutputDDR_enq()
{
  DEF_returnOutputDDR_responseAdapter_notEmptyReg__h366 = INST_returnOutputDDR_responseAdapter_notEmptyReg.METH_read();
  DEF_NOT_returnOutputDDR_responseAdapter_notEmptyReg___d2 = !DEF_returnOutputDDR_responseAdapter_notEmptyReg__h366;
  DEF_CAN_FIRE_methods_returnOutputDDR_enq = DEF_NOT_returnOutputDDR_responseAdapter_notEmptyReg___d2;
  PORT_RDY_methods_returnOutputDDR_enq = DEF_CAN_FIRE_methods_returnOutputDDR_enq;
  return PORT_RDY_methods_returnOutputDDR_enq;
}

tUInt8 MOD_mkMyDutIndicationOutputPipes::METH_methods_returnOutputDDR_notFull()
{
  DEF_returnOutputDDR_responseAdapter_notEmptyReg__h366 = INST_returnOutputDDR_responseAdapter_notEmptyReg.METH_read();
  DEF_NOT_returnOutputDDR_responseAdapter_notEmptyReg___d2 = !DEF_returnOutputDDR_responseAdapter_notEmptyReg__h366;
  PORT_methods_returnOutputDDR_notFull = DEF_NOT_returnOutputDDR_responseAdapter_notEmptyReg___d2;
  return PORT_methods_returnOutputDDR_notFull;
}

tUInt8 MOD_mkMyDutIndicationOutputPipes::METH_RDY_methods_returnOutputDDR_notFull()
{
  DEF_CAN_FIRE_methods_returnOutputDDR_notFull = (tUInt8)1u;
  PORT_RDY_methods_returnOutputDDR_notFull = DEF_CAN_FIRE_methods_returnOutputDDR_notFull;
  return PORT_RDY_methods_returnOutputDDR_notFull;
}

void MOD_mkMyDutIndicationOutputPipes::METH_methods_returnOutputSV_enq(tUInt32 ARG_methods_returnOutputSV_enq_v)
{
  PORT_EN_methods_returnOutputSV_enq = (tUInt8)1u;
  DEF_WILL_FIRE_methods_returnOutputSV_enq = (tUInt8)1u;
  PORT_methods_returnOutputSV_enq_v = ARG_methods_returnOutputSV_enq_v;
  INST_returnOutputSV_responseAdapter_bits.METH_write(ARG_methods_returnOutputSV_enq_v);
  INST_returnOutputSV_responseAdapter_notEmptyReg.METH_write((tUInt8)1u);
}

tUInt8 MOD_mkMyDutIndicationOutputPipes::METH_RDY_methods_returnOutputSV_enq()
{
  DEF_returnOutputSV_responseAdapter_notEmptyReg__h465 = INST_returnOutputSV_responseAdapter_notEmptyReg.METH_read();
  DEF_NOT_returnOutputSV_responseAdapter_notEmptyReg___d4 = !DEF_returnOutputSV_responseAdapter_notEmptyReg__h465;
  DEF_CAN_FIRE_methods_returnOutputSV_enq = DEF_NOT_returnOutputSV_responseAdapter_notEmptyReg___d4;
  PORT_RDY_methods_returnOutputSV_enq = DEF_CAN_FIRE_methods_returnOutputSV_enq;
  return PORT_RDY_methods_returnOutputSV_enq;
}

tUInt8 MOD_mkMyDutIndicationOutputPipes::METH_methods_returnOutputSV_notFull()
{
  DEF_returnOutputSV_responseAdapter_notEmptyReg__h465 = INST_returnOutputSV_responseAdapter_notEmptyReg.METH_read();
  DEF_NOT_returnOutputSV_responseAdapter_notEmptyReg___d4 = !DEF_returnOutputSV_responseAdapter_notEmptyReg__h465;
  PORT_methods_returnOutputSV_notFull = DEF_NOT_returnOutputSV_responseAdapter_notEmptyReg___d4;
  return PORT_methods_returnOutputSV_notFull;
}

tUInt8 MOD_mkMyDutIndicationOutputPipes::METH_RDY_methods_returnOutputSV_notFull()
{
  DEF_CAN_FIRE_methods_returnOutputSV_notFull = (tUInt8)1u;
  PORT_RDY_methods_returnOutputSV_notFull = DEF_CAN_FIRE_methods_returnOutputSV_notFull;
  return PORT_RDY_methods_returnOutputSV_notFull;
}

tUInt32 MOD_mkMyDutIndicationOutputPipes::METH_portalIfc_indications_0_first()
{
  DEF_x__h659 = INST_returnOutputDDR_responseAdapter_bits.METH_read();
  PORT_portalIfc_indications_0_first = DEF_x__h659.get_whole_word(15u);
  return PORT_portalIfc_indications_0_first;
}

tUInt8 MOD_mkMyDutIndicationOutputPipes::METH_RDY_portalIfc_indications_0_first()
{
  DEF_returnOutputDDR_responseAdapter_notEmptyReg__h366 = INST_returnOutputDDR_responseAdapter_notEmptyReg.METH_read();
  DEF_CAN_FIRE_portalIfc_indications_0_first = DEF_returnOutputDDR_responseAdapter_notEmptyReg__h366;
  PORT_RDY_portalIfc_indications_0_first = DEF_CAN_FIRE_portalIfc_indications_0_first;
  return PORT_RDY_portalIfc_indications_0_first;
}

void MOD_mkMyDutIndicationOutputPipes::METH_portalIfc_indications_0_deq()
{
  tUInt8 DEF_NOT_returnOutputDDR_responseAdapter_count_EQ_15___d11;
  tUInt8 DEF_x__h718;
  tUInt8 DEF_returnOutputDDR_responseAdapter_count_EQ_15___d8;
  tUInt8 DEF_IF_returnOutputDDR_responseAdapter_count_EQ_15_ETC___d10;
  tUInt8 DEF__read__h134;
  tUInt32 DEF__read__h170;
  tUInt32 DEF_x__h748;
  PORT_EN_portalIfc_indications_0_deq = (tUInt8)1u;
  DEF_WILL_FIRE_portalIfc_indications_0_deq = (tUInt8)1u;
  DEF_x__h659 = INST_returnOutputDDR_responseAdapter_bits.METH_read();
  DEF__read__h170 = INST_returnOutputDDR_responseAdapter_shift.METH_read();
  DEF_x__h748 = 1023u & (DEF__read__h170 + 32u);
  DEF__read__h134 = INST_returnOutputDDR_responseAdapter_count.METH_read();
  wop_primExtractWide(480u,
		      512u,
		      DEF_x__h659,
		      32u,
		      479u,
		      32u,
		      0u,
		      DEF_returnOutputDDR_responseAdapter_bits_BITS_479_TO_0___h771);
  DEF_returnOutputDDR_responseAdapter_count_EQ_15___d8 = DEF__read__h134 == (tUInt8)15u;
  DEF_x__h718 = (tUInt8)15u & (DEF__read__h134 + (tUInt8)1u);
  DEF_IF_returnOutputDDR_responseAdapter_count_EQ_15_ETC___d10 = DEF_returnOutputDDR_responseAdapter_count_EQ_15___d8 ? (tUInt8)0u : DEF_x__h718;
  DEF_NOT_returnOutputDDR_responseAdapter_count_EQ_15___d11 = !DEF_returnOutputDDR_responseAdapter_count_EQ_15___d8;
  DEF_x__h763.set_whole_word(DEF_returnOutputDDR_responseAdapter_bits_BITS_479_TO_0___h771.get_whole_word(14u),
			     15u).set_whole_word(DEF_returnOutputDDR_responseAdapter_bits_BITS_479_TO_0___h771.get_whole_word(13u),
						 14u).set_whole_word(DEF_returnOutputDDR_responseAdapter_bits_BITS_479_TO_0___h771.get_whole_word(12u),
								     13u).set_whole_word(DEF_returnOutputDDR_responseAdapter_bits_BITS_479_TO_0___h771.get_whole_word(11u),
											 12u).set_whole_word(DEF_returnOutputDDR_responseAdapter_bits_BITS_479_TO_0___h771.get_whole_word(10u),
													     11u).set_whole_word(DEF_returnOutputDDR_responseAdapter_bits_BITS_479_TO_0___h771.get_whole_word(9u),
																 10u).set_whole_word(DEF_returnOutputDDR_responseAdapter_bits_BITS_479_TO_0___h771.get_whole_word(8u),
																		     9u).set_whole_word(DEF_returnOutputDDR_responseAdapter_bits_BITS_479_TO_0___h771.get_whole_word(7u),
																					8u).set_whole_word(DEF_returnOutputDDR_responseAdapter_bits_BITS_479_TO_0___h771.get_whole_word(6u),
																							   7u).set_whole_word(DEF_returnOutputDDR_responseAdapter_bits_BITS_479_TO_0___h771.get_whole_word(5u),
																									      6u).set_whole_word(DEF_returnOutputDDR_responseAdapter_bits_BITS_479_TO_0___h771.get_whole_word(4u),
																												 5u).set_whole_word(DEF_returnOutputDDR_responseAdapter_bits_BITS_479_TO_0___h771.get_whole_word(3u),
																														    4u).set_whole_word(DEF_returnOutputDDR_responseAdapter_bits_BITS_479_TO_0___h771.get_whole_word(2u),
																																       3u).set_whole_word(DEF_returnOutputDDR_responseAdapter_bits_BITS_479_TO_0___h771.get_whole_word(1u),
																																			  2u).build_concat((((tUInt64)(DEF_returnOutputDDR_responseAdapter_bits_BITS_479_TO_0___h771.get_whole_word(0u))) << 32u) | (tUInt64)(0u),
																																					   0u,
																																					   64u);
  INST_returnOutputDDR_responseAdapter_count.METH_write(DEF_IF_returnOutputDDR_responseAdapter_count_EQ_15_ETC___d10);
  if (DEF_returnOutputDDR_responseAdapter_count_EQ_15___d8)
    INST_returnOutputDDR_responseAdapter_notEmptyReg.METH_write((tUInt8)0u);
  if (DEF_NOT_returnOutputDDR_responseAdapter_count_EQ_15___d11)
    INST_returnOutputDDR_responseAdapter_shift.METH_write(DEF_x__h748);
  if (DEF_NOT_returnOutputDDR_responseAdapter_count_EQ_15___d11)
    INST_returnOutputDDR_responseAdapter_bits.METH_write(DEF_x__h763);
}

tUInt8 MOD_mkMyDutIndicationOutputPipes::METH_RDY_portalIfc_indications_0_deq()
{
  DEF_returnOutputDDR_responseAdapter_notEmptyReg__h366 = INST_returnOutputDDR_responseAdapter_notEmptyReg.METH_read();
  DEF_CAN_FIRE_portalIfc_indications_0_deq = DEF_returnOutputDDR_responseAdapter_notEmptyReg__h366;
  PORT_RDY_portalIfc_indications_0_deq = DEF_CAN_FIRE_portalIfc_indications_0_deq;
  return PORT_RDY_portalIfc_indications_0_deq;
}

tUInt8 MOD_mkMyDutIndicationOutputPipes::METH_portalIfc_indications_0_notEmpty()
{
  DEF_returnOutputDDR_responseAdapter_notEmptyReg__h366 = INST_returnOutputDDR_responseAdapter_notEmptyReg.METH_read();
  PORT_portalIfc_indications_0_notEmpty = DEF_returnOutputDDR_responseAdapter_notEmptyReg__h366;
  return PORT_portalIfc_indications_0_notEmpty;
}

tUInt8 MOD_mkMyDutIndicationOutputPipes::METH_RDY_portalIfc_indications_0_notEmpty()
{
  DEF_CAN_FIRE_portalIfc_indications_0_notEmpty = (tUInt8)1u;
  PORT_RDY_portalIfc_indications_0_notEmpty = DEF_CAN_FIRE_portalIfc_indications_0_notEmpty;
  return PORT_RDY_portalIfc_indications_0_notEmpty;
}

tUInt32 MOD_mkMyDutIndicationOutputPipes::METH_portalIfc_indications_1_first()
{
  PORT_portalIfc_indications_1_first = INST_returnOutputSV_responseAdapter_bits.METH_read();
  return PORT_portalIfc_indications_1_first;
}

tUInt8 MOD_mkMyDutIndicationOutputPipes::METH_RDY_portalIfc_indications_1_first()
{
  DEF_returnOutputSV_responseAdapter_notEmptyReg__h465 = INST_returnOutputSV_responseAdapter_notEmptyReg.METH_read();
  DEF_CAN_FIRE_portalIfc_indications_1_first = DEF_returnOutputSV_responseAdapter_notEmptyReg__h465;
  PORT_RDY_portalIfc_indications_1_first = DEF_CAN_FIRE_portalIfc_indications_1_first;
  return PORT_RDY_portalIfc_indications_1_first;
}

void MOD_mkMyDutIndicationOutputPipes::METH_portalIfc_indications_1_deq()
{
  PORT_EN_portalIfc_indications_1_deq = (tUInt8)1u;
  DEF_WILL_FIRE_portalIfc_indications_1_deq = (tUInt8)1u;
  INST_returnOutputSV_responseAdapter_notEmptyReg.METH_write((tUInt8)0u);
}

tUInt8 MOD_mkMyDutIndicationOutputPipes::METH_RDY_portalIfc_indications_1_deq()
{
  DEF_returnOutputSV_responseAdapter_notEmptyReg__h465 = INST_returnOutputSV_responseAdapter_notEmptyReg.METH_read();
  DEF_CAN_FIRE_portalIfc_indications_1_deq = DEF_returnOutputSV_responseAdapter_notEmptyReg__h465;
  PORT_RDY_portalIfc_indications_1_deq = DEF_CAN_FIRE_portalIfc_indications_1_deq;
  return PORT_RDY_portalIfc_indications_1_deq;
}

tUInt8 MOD_mkMyDutIndicationOutputPipes::METH_portalIfc_indications_1_notEmpty()
{
  DEF_returnOutputSV_responseAdapter_notEmptyReg__h465 = INST_returnOutputSV_responseAdapter_notEmptyReg.METH_read();
  PORT_portalIfc_indications_1_notEmpty = DEF_returnOutputSV_responseAdapter_notEmptyReg__h465;
  return PORT_portalIfc_indications_1_notEmpty;
}

tUInt8 MOD_mkMyDutIndicationOutputPipes::METH_RDY_portalIfc_indications_1_notEmpty()
{
  DEF_CAN_FIRE_portalIfc_indications_1_notEmpty = (tUInt8)1u;
  PORT_RDY_portalIfc_indications_1_notEmpty = DEF_CAN_FIRE_portalIfc_indications_1_notEmpty;
  return PORT_RDY_portalIfc_indications_1_notEmpty;
}

tUInt8 MOD_mkMyDutIndicationOutputPipes::METH_portalIfc_intr_status()
{
  DEF_returnOutputSV_responseAdapter_notEmptyReg__h465 = INST_returnOutputSV_responseAdapter_notEmptyReg.METH_read();
  DEF_returnOutputDDR_responseAdapter_notEmptyReg__h366 = INST_returnOutputDDR_responseAdapter_notEmptyReg.METH_read();
  PORT_portalIfc_intr_status = DEF_returnOutputDDR_responseAdapter_notEmptyReg__h366 || DEF_returnOutputSV_responseAdapter_notEmptyReg__h465;
  return PORT_portalIfc_intr_status;
}

tUInt8 MOD_mkMyDutIndicationOutputPipes::METH_RDY_portalIfc_intr_status()
{
  DEF_CAN_FIRE_portalIfc_intr_status = (tUInt8)1u;
  PORT_RDY_portalIfc_intr_status = DEF_CAN_FIRE_portalIfc_intr_status;
  return PORT_RDY_portalIfc_intr_status;
}

tUInt32 MOD_mkMyDutIndicationOutputPipes::METH_portalIfc_intr_channel()
{
  tUInt32 DEF_IF_returnOutputSV_responseAdapter_notEmptyReg__ETC___d16;
  DEF_returnOutputSV_responseAdapter_notEmptyReg__h465 = INST_returnOutputSV_responseAdapter_notEmptyReg.METH_read();
  DEF_returnOutputDDR_responseAdapter_notEmptyReg__h366 = INST_returnOutputDDR_responseAdapter_notEmptyReg.METH_read();
  DEF_IF_returnOutputSV_responseAdapter_notEmptyReg__ETC___d16 = DEF_returnOutputSV_responseAdapter_notEmptyReg__h465 ? 1u : 4294967295u;
  PORT_portalIfc_intr_channel = DEF_returnOutputDDR_responseAdapter_notEmptyReg__h366 ? 0u : DEF_IF_returnOutputSV_responseAdapter_notEmptyReg__ETC___d16;
  return PORT_portalIfc_intr_channel;
}

tUInt8 MOD_mkMyDutIndicationOutputPipes::METH_RDY_portalIfc_intr_channel()
{
  DEF_CAN_FIRE_portalIfc_intr_channel = (tUInt8)1u;
  PORT_RDY_portalIfc_intr_channel = DEF_CAN_FIRE_portalIfc_intr_channel;
  return PORT_RDY_portalIfc_intr_channel;
}


/* Reset routines */

void MOD_mkMyDutIndicationOutputPipes::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_returnOutputSV_responseAdapter_shift.reset_RST(ARG_rst_in);
  INST_returnOutputSV_responseAdapter_notEmptyReg.reset_RST(ARG_rst_in);
  INST_returnOutputSV_responseAdapter_bits.reset_RST(ARG_rst_in);
  INST_returnOutputDDR_responseAdapter_shift.reset_RST(ARG_rst_in);
  INST_returnOutputDDR_responseAdapter_notEmptyReg.reset_RST(ARG_rst_in);
  INST_returnOutputDDR_responseAdapter_count.reset_RST(ARG_rst_in);
  INST_returnOutputDDR_responseAdapter_bits.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkMyDutIndicationOutputPipes::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkMyDutIndicationOutputPipes::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_returnOutputDDR_responseAdapter_bits.dump_state(indent + 2u);
  INST_returnOutputDDR_responseAdapter_count.dump_state(indent + 2u);
  INST_returnOutputDDR_responseAdapter_notEmptyReg.dump_state(indent + 2u);
  INST_returnOutputDDR_responseAdapter_shift.dump_state(indent + 2u);
  INST_returnOutputSV_responseAdapter_bits.dump_state(indent + 2u);
  INST_returnOutputSV_responseAdapter_notEmptyReg.dump_state(indent + 2u);
  INST_returnOutputSV_responseAdapter_shift.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkMyDutIndicationOutputPipes::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 61u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_methods_returnOutputDDR_enq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_methods_returnOutputDDR_notFull", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_methods_returnOutputSV_enq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_methods_returnOutputSV_notFull", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_portalIfc_indications_0_deq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_portalIfc_indications_0_first", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_portalIfc_indications_0_notEmpty", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_portalIfc_indications_1_deq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_portalIfc_indications_1_first", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_portalIfc_indications_1_notEmpty", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_portalIfc_intr_channel", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_portalIfc_intr_status", 1u);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_portalIfc_messageSize_size", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_returnOutputDDR_responseAdapter_notEmptyReg___d2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_returnOutputSV_responseAdapter_notEmptyReg___d4", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_methods_returnOutputDDR_enq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_methods_returnOutputSV_enq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_portalIfc_indications_0_deq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_portalIfc_indications_1_deq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "returnOutputDDR_responseAdapter_bits_BITS_479_TO_0___h771", 480u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "returnOutputDDR_responseAdapter_notEmptyReg__h366", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "returnOutputSV_responseAdapter_notEmptyReg__h465", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h659", 512u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h763", 512u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_methods_returnOutputDDR_enq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_methods_returnOutputSV_enq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_portalIfc_indications_0_deq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_portalIfc_indications_1_deq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_methods_returnOutputDDR_enq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_methods_returnOutputDDR_notFull", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_methods_returnOutputSV_enq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_methods_returnOutputSV_notFull", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_portalIfc_indications_0_deq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_portalIfc_indications_0_first", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_portalIfc_indications_0_notEmpty", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_portalIfc_indications_1_deq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_portalIfc_indications_1_first", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_portalIfc_indications_1_notEmpty", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_portalIfc_intr_channel", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_portalIfc_intr_status", 1u);
  vcd_write_def(sim_hdl, num++, "RDY_portalIfc_messageSize_size", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "methods_returnOutputDDR_enq_v", 512u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "methods_returnOutputDDR_notFull", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "methods_returnOutputSV_enq_v", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "methods_returnOutputSV_notFull", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "portalIfc_indications_0_first", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "portalIfc_indications_0_notEmpty", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "portalIfc_indications_1_first", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "portalIfc_indications_1_notEmpty", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "portalIfc_intr_channel", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "portalIfc_intr_status", 1u);
  vcd_write_def(sim_hdl, num++, "portalIfc_messageSize_size", 16u);
  vcd_write_def(sim_hdl, num++, "portalIfc_messageSize_size_methodNumber", 16u);
  num = INST_returnOutputDDR_responseAdapter_bits.dump_VCD_defs(num);
  num = INST_returnOutputDDR_responseAdapter_count.dump_VCD_defs(num);
  num = INST_returnOutputDDR_responseAdapter_notEmptyReg.dump_VCD_defs(num);
  num = INST_returnOutputDDR_responseAdapter_shift.dump_VCD_defs(num);
  num = INST_returnOutputSV_responseAdapter_bits.dump_VCD_defs(num);
  num = INST_returnOutputSV_responseAdapter_notEmptyReg.dump_VCD_defs(num);
  num = INST_returnOutputSV_responseAdapter_shift.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkMyDutIndicationOutputPipes::dump_VCD(tVCDDumpType dt,
						unsigned int levels,
						MOD_mkMyDutIndicationOutputPipes &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkMyDutIndicationOutputPipes::vcd_defs(tVCDDumpType dt,
						MOD_mkMyDutIndicationOutputPipes &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 480u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 512u);
    vcd_write_x(sim_hdl, num++, 512u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 512u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 16u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_methods_returnOutputDDR_enq) != DEF_CAN_FIRE_methods_returnOutputDDR_enq)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_methods_returnOutputDDR_enq, 1u);
	backing.DEF_CAN_FIRE_methods_returnOutputDDR_enq = DEF_CAN_FIRE_methods_returnOutputDDR_enq;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_methods_returnOutputDDR_notFull) != DEF_CAN_FIRE_methods_returnOutputDDR_notFull)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_methods_returnOutputDDR_notFull, 1u);
	backing.DEF_CAN_FIRE_methods_returnOutputDDR_notFull = DEF_CAN_FIRE_methods_returnOutputDDR_notFull;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_methods_returnOutputSV_enq) != DEF_CAN_FIRE_methods_returnOutputSV_enq)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_methods_returnOutputSV_enq, 1u);
	backing.DEF_CAN_FIRE_methods_returnOutputSV_enq = DEF_CAN_FIRE_methods_returnOutputSV_enq;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_methods_returnOutputSV_notFull) != DEF_CAN_FIRE_methods_returnOutputSV_notFull)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_methods_returnOutputSV_notFull, 1u);
	backing.DEF_CAN_FIRE_methods_returnOutputSV_notFull = DEF_CAN_FIRE_methods_returnOutputSV_notFull;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_portalIfc_indications_0_deq) != DEF_CAN_FIRE_portalIfc_indications_0_deq)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_portalIfc_indications_0_deq, 1u);
	backing.DEF_CAN_FIRE_portalIfc_indications_0_deq = DEF_CAN_FIRE_portalIfc_indications_0_deq;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_portalIfc_indications_0_first) != DEF_CAN_FIRE_portalIfc_indications_0_first)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_portalIfc_indications_0_first, 1u);
	backing.DEF_CAN_FIRE_portalIfc_indications_0_first = DEF_CAN_FIRE_portalIfc_indications_0_first;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_portalIfc_indications_0_notEmpty) != DEF_CAN_FIRE_portalIfc_indications_0_notEmpty)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_portalIfc_indications_0_notEmpty, 1u);
	backing.DEF_CAN_FIRE_portalIfc_indications_0_notEmpty = DEF_CAN_FIRE_portalIfc_indications_0_notEmpty;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_portalIfc_indications_1_deq) != DEF_CAN_FIRE_portalIfc_indications_1_deq)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_portalIfc_indications_1_deq, 1u);
	backing.DEF_CAN_FIRE_portalIfc_indications_1_deq = DEF_CAN_FIRE_portalIfc_indications_1_deq;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_portalIfc_indications_1_first) != DEF_CAN_FIRE_portalIfc_indications_1_first)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_portalIfc_indications_1_first, 1u);
	backing.DEF_CAN_FIRE_portalIfc_indications_1_first = DEF_CAN_FIRE_portalIfc_indications_1_first;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_portalIfc_indications_1_notEmpty) != DEF_CAN_FIRE_portalIfc_indications_1_notEmpty)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_portalIfc_indications_1_notEmpty, 1u);
	backing.DEF_CAN_FIRE_portalIfc_indications_1_notEmpty = DEF_CAN_FIRE_portalIfc_indications_1_notEmpty;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_portalIfc_intr_channel) != DEF_CAN_FIRE_portalIfc_intr_channel)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_portalIfc_intr_channel, 1u);
	backing.DEF_CAN_FIRE_portalIfc_intr_channel = DEF_CAN_FIRE_portalIfc_intr_channel;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_portalIfc_intr_status) != DEF_CAN_FIRE_portalIfc_intr_status)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_portalIfc_intr_status, 1u);
	backing.DEF_CAN_FIRE_portalIfc_intr_status = DEF_CAN_FIRE_portalIfc_intr_status;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_portalIfc_messageSize_size) != DEF_CAN_FIRE_portalIfc_messageSize_size)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_portalIfc_messageSize_size, 1u);
	backing.DEF_CAN_FIRE_portalIfc_messageSize_size = DEF_CAN_FIRE_portalIfc_messageSize_size;
      }
      ++num;
      if ((backing.DEF_NOT_returnOutputDDR_responseAdapter_notEmptyReg___d2) != DEF_NOT_returnOutputDDR_responseAdapter_notEmptyReg___d2)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_returnOutputDDR_responseAdapter_notEmptyReg___d2, 1u);
	backing.DEF_NOT_returnOutputDDR_responseAdapter_notEmptyReg___d2 = DEF_NOT_returnOutputDDR_responseAdapter_notEmptyReg___d2;
      }
      ++num;
      if ((backing.DEF_NOT_returnOutputSV_responseAdapter_notEmptyReg___d4) != DEF_NOT_returnOutputSV_responseAdapter_notEmptyReg___d4)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_returnOutputSV_responseAdapter_notEmptyReg___d4, 1u);
	backing.DEF_NOT_returnOutputSV_responseAdapter_notEmptyReg___d4 = DEF_NOT_returnOutputSV_responseAdapter_notEmptyReg___d4;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_methods_returnOutputDDR_enq) != DEF_WILL_FIRE_methods_returnOutputDDR_enq)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_methods_returnOutputDDR_enq, 1u);
	backing.DEF_WILL_FIRE_methods_returnOutputDDR_enq = DEF_WILL_FIRE_methods_returnOutputDDR_enq;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_methods_returnOutputSV_enq) != DEF_WILL_FIRE_methods_returnOutputSV_enq)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_methods_returnOutputSV_enq, 1u);
	backing.DEF_WILL_FIRE_methods_returnOutputSV_enq = DEF_WILL_FIRE_methods_returnOutputSV_enq;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_portalIfc_indications_0_deq) != DEF_WILL_FIRE_portalIfc_indications_0_deq)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_portalIfc_indications_0_deq, 1u);
	backing.DEF_WILL_FIRE_portalIfc_indications_0_deq = DEF_WILL_FIRE_portalIfc_indications_0_deq;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_portalIfc_indications_1_deq) != DEF_WILL_FIRE_portalIfc_indications_1_deq)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_portalIfc_indications_1_deq, 1u);
	backing.DEF_WILL_FIRE_portalIfc_indications_1_deq = DEF_WILL_FIRE_portalIfc_indications_1_deq;
      }
      ++num;
      if ((backing.DEF_returnOutputDDR_responseAdapter_bits_BITS_479_TO_0___h771) != DEF_returnOutputDDR_responseAdapter_bits_BITS_479_TO_0___h771)
      {
	vcd_write_val(sim_hdl, num, DEF_returnOutputDDR_responseAdapter_bits_BITS_479_TO_0___h771, 480u);
	backing.DEF_returnOutputDDR_responseAdapter_bits_BITS_479_TO_0___h771 = DEF_returnOutputDDR_responseAdapter_bits_BITS_479_TO_0___h771;
      }
      ++num;
      if ((backing.DEF_returnOutputDDR_responseAdapter_notEmptyReg__h366) != DEF_returnOutputDDR_responseAdapter_notEmptyReg__h366)
      {
	vcd_write_val(sim_hdl, num, DEF_returnOutputDDR_responseAdapter_notEmptyReg__h366, 1u);
	backing.DEF_returnOutputDDR_responseAdapter_notEmptyReg__h366 = DEF_returnOutputDDR_responseAdapter_notEmptyReg__h366;
      }
      ++num;
      if ((backing.DEF_returnOutputSV_responseAdapter_notEmptyReg__h465) != DEF_returnOutputSV_responseAdapter_notEmptyReg__h465)
      {
	vcd_write_val(sim_hdl, num, DEF_returnOutputSV_responseAdapter_notEmptyReg__h465, 1u);
	backing.DEF_returnOutputSV_responseAdapter_notEmptyReg__h465 = DEF_returnOutputSV_responseAdapter_notEmptyReg__h465;
      }
      ++num;
      if ((backing.DEF_x__h659) != DEF_x__h659)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h659, 512u);
	backing.DEF_x__h659 = DEF_x__h659;
      }
      ++num;
      if ((backing.DEF_x__h763) != DEF_x__h763)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h763, 512u);
	backing.DEF_x__h763 = DEF_x__h763;
      }
      ++num;
      if ((backing.PORT_EN_methods_returnOutputDDR_enq) != PORT_EN_methods_returnOutputDDR_enq)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_methods_returnOutputDDR_enq, 1u);
	backing.PORT_EN_methods_returnOutputDDR_enq = PORT_EN_methods_returnOutputDDR_enq;
      }
      ++num;
      if ((backing.PORT_EN_methods_returnOutputSV_enq) != PORT_EN_methods_returnOutputSV_enq)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_methods_returnOutputSV_enq, 1u);
	backing.PORT_EN_methods_returnOutputSV_enq = PORT_EN_methods_returnOutputSV_enq;
      }
      ++num;
      if ((backing.PORT_EN_portalIfc_indications_0_deq) != PORT_EN_portalIfc_indications_0_deq)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_portalIfc_indications_0_deq, 1u);
	backing.PORT_EN_portalIfc_indications_0_deq = PORT_EN_portalIfc_indications_0_deq;
      }
      ++num;
      if ((backing.PORT_EN_portalIfc_indications_1_deq) != PORT_EN_portalIfc_indications_1_deq)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_portalIfc_indications_1_deq, 1u);
	backing.PORT_EN_portalIfc_indications_1_deq = PORT_EN_portalIfc_indications_1_deq;
      }
      ++num;
      if ((backing.PORT_RDY_methods_returnOutputDDR_enq) != PORT_RDY_methods_returnOutputDDR_enq)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_methods_returnOutputDDR_enq, 1u);
	backing.PORT_RDY_methods_returnOutputDDR_enq = PORT_RDY_methods_returnOutputDDR_enq;
      }
      ++num;
      if ((backing.PORT_RDY_methods_returnOutputDDR_notFull) != PORT_RDY_methods_returnOutputDDR_notFull)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_methods_returnOutputDDR_notFull, 1u);
	backing.PORT_RDY_methods_returnOutputDDR_notFull = PORT_RDY_methods_returnOutputDDR_notFull;
      }
      ++num;
      if ((backing.PORT_RDY_methods_returnOutputSV_enq) != PORT_RDY_methods_returnOutputSV_enq)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_methods_returnOutputSV_enq, 1u);
	backing.PORT_RDY_methods_returnOutputSV_enq = PORT_RDY_methods_returnOutputSV_enq;
      }
      ++num;
      if ((backing.PORT_RDY_methods_returnOutputSV_notFull) != PORT_RDY_methods_returnOutputSV_notFull)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_methods_returnOutputSV_notFull, 1u);
	backing.PORT_RDY_methods_returnOutputSV_notFull = PORT_RDY_methods_returnOutputSV_notFull;
      }
      ++num;
      if ((backing.PORT_RDY_portalIfc_indications_0_deq) != PORT_RDY_portalIfc_indications_0_deq)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_portalIfc_indications_0_deq, 1u);
	backing.PORT_RDY_portalIfc_indications_0_deq = PORT_RDY_portalIfc_indications_0_deq;
      }
      ++num;
      if ((backing.PORT_RDY_portalIfc_indications_0_first) != PORT_RDY_portalIfc_indications_0_first)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_portalIfc_indications_0_first, 1u);
	backing.PORT_RDY_portalIfc_indications_0_first = PORT_RDY_portalIfc_indications_0_first;
      }
      ++num;
      if ((backing.PORT_RDY_portalIfc_indications_0_notEmpty) != PORT_RDY_portalIfc_indications_0_notEmpty)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_portalIfc_indications_0_notEmpty, 1u);
	backing.PORT_RDY_portalIfc_indications_0_notEmpty = PORT_RDY_portalIfc_indications_0_notEmpty;
      }
      ++num;
      if ((backing.PORT_RDY_portalIfc_indications_1_deq) != PORT_RDY_portalIfc_indications_1_deq)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_portalIfc_indications_1_deq, 1u);
	backing.PORT_RDY_portalIfc_indications_1_deq = PORT_RDY_portalIfc_indications_1_deq;
      }
      ++num;
      if ((backing.PORT_RDY_portalIfc_indications_1_first) != PORT_RDY_portalIfc_indications_1_first)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_portalIfc_indications_1_first, 1u);
	backing.PORT_RDY_portalIfc_indications_1_first = PORT_RDY_portalIfc_indications_1_first;
      }
      ++num;
      if ((backing.PORT_RDY_portalIfc_indications_1_notEmpty) != PORT_RDY_portalIfc_indications_1_notEmpty)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_portalIfc_indications_1_notEmpty, 1u);
	backing.PORT_RDY_portalIfc_indications_1_notEmpty = PORT_RDY_portalIfc_indications_1_notEmpty;
      }
      ++num;
      if ((backing.PORT_RDY_portalIfc_intr_channel) != PORT_RDY_portalIfc_intr_channel)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_portalIfc_intr_channel, 1u);
	backing.PORT_RDY_portalIfc_intr_channel = PORT_RDY_portalIfc_intr_channel;
      }
      ++num;
      if ((backing.PORT_RDY_portalIfc_intr_status) != PORT_RDY_portalIfc_intr_status)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_portalIfc_intr_status, 1u);
	backing.PORT_RDY_portalIfc_intr_status = PORT_RDY_portalIfc_intr_status;
      }
      ++num;
      if ((backing.PORT_RDY_portalIfc_messageSize_size) != PORT_RDY_portalIfc_messageSize_size)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_portalIfc_messageSize_size, 1u);
	backing.PORT_RDY_portalIfc_messageSize_size = PORT_RDY_portalIfc_messageSize_size;
      }
      ++num;
      if ((backing.PORT_methods_returnOutputDDR_enq_v) != PORT_methods_returnOutputDDR_enq_v)
      {
	vcd_write_val(sim_hdl, num, PORT_methods_returnOutputDDR_enq_v, 512u);
	backing.PORT_methods_returnOutputDDR_enq_v = PORT_methods_returnOutputDDR_enq_v;
      }
      ++num;
      if ((backing.PORT_methods_returnOutputDDR_notFull) != PORT_methods_returnOutputDDR_notFull)
      {
	vcd_write_val(sim_hdl, num, PORT_methods_returnOutputDDR_notFull, 1u);
	backing.PORT_methods_returnOutputDDR_notFull = PORT_methods_returnOutputDDR_notFull;
      }
      ++num;
      if ((backing.PORT_methods_returnOutputSV_enq_v) != PORT_methods_returnOutputSV_enq_v)
      {
	vcd_write_val(sim_hdl, num, PORT_methods_returnOutputSV_enq_v, 32u);
	backing.PORT_methods_returnOutputSV_enq_v = PORT_methods_returnOutputSV_enq_v;
      }
      ++num;
      if ((backing.PORT_methods_returnOutputSV_notFull) != PORT_methods_returnOutputSV_notFull)
      {
	vcd_write_val(sim_hdl, num, PORT_methods_returnOutputSV_notFull, 1u);
	backing.PORT_methods_returnOutputSV_notFull = PORT_methods_returnOutputSV_notFull;
      }
      ++num;
      if ((backing.PORT_portalIfc_indications_0_first) != PORT_portalIfc_indications_0_first)
      {
	vcd_write_val(sim_hdl, num, PORT_portalIfc_indications_0_first, 32u);
	backing.PORT_portalIfc_indications_0_first = PORT_portalIfc_indications_0_first;
      }
      ++num;
      if ((backing.PORT_portalIfc_indications_0_notEmpty) != PORT_portalIfc_indications_0_notEmpty)
      {
	vcd_write_val(sim_hdl, num, PORT_portalIfc_indications_0_notEmpty, 1u);
	backing.PORT_portalIfc_indications_0_notEmpty = PORT_portalIfc_indications_0_notEmpty;
      }
      ++num;
      if ((backing.PORT_portalIfc_indications_1_first) != PORT_portalIfc_indications_1_first)
      {
	vcd_write_val(sim_hdl, num, PORT_portalIfc_indications_1_first, 32u);
	backing.PORT_portalIfc_indications_1_first = PORT_portalIfc_indications_1_first;
      }
      ++num;
      if ((backing.PORT_portalIfc_indications_1_notEmpty) != PORT_portalIfc_indications_1_notEmpty)
      {
	vcd_write_val(sim_hdl, num, PORT_portalIfc_indications_1_notEmpty, 1u);
	backing.PORT_portalIfc_indications_1_notEmpty = PORT_portalIfc_indications_1_notEmpty;
      }
      ++num;
      if ((backing.PORT_portalIfc_intr_channel) != PORT_portalIfc_intr_channel)
      {
	vcd_write_val(sim_hdl, num, PORT_portalIfc_intr_channel, 32u);
	backing.PORT_portalIfc_intr_channel = PORT_portalIfc_intr_channel;
      }
      ++num;
      if ((backing.PORT_portalIfc_intr_status) != PORT_portalIfc_intr_status)
      {
	vcd_write_val(sim_hdl, num, PORT_portalIfc_intr_status, 1u);
	backing.PORT_portalIfc_intr_status = PORT_portalIfc_intr_status;
      }
      ++num;
      if ((backing.PORT_portalIfc_messageSize_size) != PORT_portalIfc_messageSize_size)
      {
	vcd_write_val(sim_hdl, num, PORT_portalIfc_messageSize_size, 16u);
	backing.PORT_portalIfc_messageSize_size = PORT_portalIfc_messageSize_size;
      }
      ++num;
      if ((backing.PORT_portalIfc_messageSize_size_methodNumber) != PORT_portalIfc_messageSize_size_methodNumber)
      {
	vcd_write_val(sim_hdl, num, PORT_portalIfc_messageSize_size_methodNumber, 16u);
	backing.PORT_portalIfc_messageSize_size_methodNumber = PORT_portalIfc_messageSize_size_methodNumber;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_methods_returnOutputDDR_enq, 1u);
      backing.DEF_CAN_FIRE_methods_returnOutputDDR_enq = DEF_CAN_FIRE_methods_returnOutputDDR_enq;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_methods_returnOutputDDR_notFull, 1u);
      backing.DEF_CAN_FIRE_methods_returnOutputDDR_notFull = DEF_CAN_FIRE_methods_returnOutputDDR_notFull;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_methods_returnOutputSV_enq, 1u);
      backing.DEF_CAN_FIRE_methods_returnOutputSV_enq = DEF_CAN_FIRE_methods_returnOutputSV_enq;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_methods_returnOutputSV_notFull, 1u);
      backing.DEF_CAN_FIRE_methods_returnOutputSV_notFull = DEF_CAN_FIRE_methods_returnOutputSV_notFull;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_portalIfc_indications_0_deq, 1u);
      backing.DEF_CAN_FIRE_portalIfc_indications_0_deq = DEF_CAN_FIRE_portalIfc_indications_0_deq;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_portalIfc_indications_0_first, 1u);
      backing.DEF_CAN_FIRE_portalIfc_indications_0_first = DEF_CAN_FIRE_portalIfc_indications_0_first;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_portalIfc_indications_0_notEmpty, 1u);
      backing.DEF_CAN_FIRE_portalIfc_indications_0_notEmpty = DEF_CAN_FIRE_portalIfc_indications_0_notEmpty;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_portalIfc_indications_1_deq, 1u);
      backing.DEF_CAN_FIRE_portalIfc_indications_1_deq = DEF_CAN_FIRE_portalIfc_indications_1_deq;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_portalIfc_indications_1_first, 1u);
      backing.DEF_CAN_FIRE_portalIfc_indications_1_first = DEF_CAN_FIRE_portalIfc_indications_1_first;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_portalIfc_indications_1_notEmpty, 1u);
      backing.DEF_CAN_FIRE_portalIfc_indications_1_notEmpty = DEF_CAN_FIRE_portalIfc_indications_1_notEmpty;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_portalIfc_intr_channel, 1u);
      backing.DEF_CAN_FIRE_portalIfc_intr_channel = DEF_CAN_FIRE_portalIfc_intr_channel;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_portalIfc_intr_status, 1u);
      backing.DEF_CAN_FIRE_portalIfc_intr_status = DEF_CAN_FIRE_portalIfc_intr_status;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_portalIfc_messageSize_size, 1u);
      backing.DEF_CAN_FIRE_portalIfc_messageSize_size = DEF_CAN_FIRE_portalIfc_messageSize_size;
      vcd_write_val(sim_hdl, num++, DEF_NOT_returnOutputDDR_responseAdapter_notEmptyReg___d2, 1u);
      backing.DEF_NOT_returnOutputDDR_responseAdapter_notEmptyReg___d2 = DEF_NOT_returnOutputDDR_responseAdapter_notEmptyReg___d2;
      vcd_write_val(sim_hdl, num++, DEF_NOT_returnOutputSV_responseAdapter_notEmptyReg___d4, 1u);
      backing.DEF_NOT_returnOutputSV_responseAdapter_notEmptyReg___d4 = DEF_NOT_returnOutputSV_responseAdapter_notEmptyReg___d4;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_methods_returnOutputDDR_enq, 1u);
      backing.DEF_WILL_FIRE_methods_returnOutputDDR_enq = DEF_WILL_FIRE_methods_returnOutputDDR_enq;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_methods_returnOutputSV_enq, 1u);
      backing.DEF_WILL_FIRE_methods_returnOutputSV_enq = DEF_WILL_FIRE_methods_returnOutputSV_enq;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_portalIfc_indications_0_deq, 1u);
      backing.DEF_WILL_FIRE_portalIfc_indications_0_deq = DEF_WILL_FIRE_portalIfc_indications_0_deq;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_portalIfc_indications_1_deq, 1u);
      backing.DEF_WILL_FIRE_portalIfc_indications_1_deq = DEF_WILL_FIRE_portalIfc_indications_1_deq;
      vcd_write_val(sim_hdl, num++, DEF_returnOutputDDR_responseAdapter_bits_BITS_479_TO_0___h771, 480u);
      backing.DEF_returnOutputDDR_responseAdapter_bits_BITS_479_TO_0___h771 = DEF_returnOutputDDR_responseAdapter_bits_BITS_479_TO_0___h771;
      vcd_write_val(sim_hdl, num++, DEF_returnOutputDDR_responseAdapter_notEmptyReg__h366, 1u);
      backing.DEF_returnOutputDDR_responseAdapter_notEmptyReg__h366 = DEF_returnOutputDDR_responseAdapter_notEmptyReg__h366;
      vcd_write_val(sim_hdl, num++, DEF_returnOutputSV_responseAdapter_notEmptyReg__h465, 1u);
      backing.DEF_returnOutputSV_responseAdapter_notEmptyReg__h465 = DEF_returnOutputSV_responseAdapter_notEmptyReg__h465;
      vcd_write_val(sim_hdl, num++, DEF_x__h659, 512u);
      backing.DEF_x__h659 = DEF_x__h659;
      vcd_write_val(sim_hdl, num++, DEF_x__h763, 512u);
      backing.DEF_x__h763 = DEF_x__h763;
      vcd_write_val(sim_hdl, num++, PORT_EN_methods_returnOutputDDR_enq, 1u);
      backing.PORT_EN_methods_returnOutputDDR_enq = PORT_EN_methods_returnOutputDDR_enq;
      vcd_write_val(sim_hdl, num++, PORT_EN_methods_returnOutputSV_enq, 1u);
      backing.PORT_EN_methods_returnOutputSV_enq = PORT_EN_methods_returnOutputSV_enq;
      vcd_write_val(sim_hdl, num++, PORT_EN_portalIfc_indications_0_deq, 1u);
      backing.PORT_EN_portalIfc_indications_0_deq = PORT_EN_portalIfc_indications_0_deq;
      vcd_write_val(sim_hdl, num++, PORT_EN_portalIfc_indications_1_deq, 1u);
      backing.PORT_EN_portalIfc_indications_1_deq = PORT_EN_portalIfc_indications_1_deq;
      vcd_write_val(sim_hdl, num++, PORT_RDY_methods_returnOutputDDR_enq, 1u);
      backing.PORT_RDY_methods_returnOutputDDR_enq = PORT_RDY_methods_returnOutputDDR_enq;
      vcd_write_val(sim_hdl, num++, PORT_RDY_methods_returnOutputDDR_notFull, 1u);
      backing.PORT_RDY_methods_returnOutputDDR_notFull = PORT_RDY_methods_returnOutputDDR_notFull;
      vcd_write_val(sim_hdl, num++, PORT_RDY_methods_returnOutputSV_enq, 1u);
      backing.PORT_RDY_methods_returnOutputSV_enq = PORT_RDY_methods_returnOutputSV_enq;
      vcd_write_val(sim_hdl, num++, PORT_RDY_methods_returnOutputSV_notFull, 1u);
      backing.PORT_RDY_methods_returnOutputSV_notFull = PORT_RDY_methods_returnOutputSV_notFull;
      vcd_write_val(sim_hdl, num++, PORT_RDY_portalIfc_indications_0_deq, 1u);
      backing.PORT_RDY_portalIfc_indications_0_deq = PORT_RDY_portalIfc_indications_0_deq;
      vcd_write_val(sim_hdl, num++, PORT_RDY_portalIfc_indications_0_first, 1u);
      backing.PORT_RDY_portalIfc_indications_0_first = PORT_RDY_portalIfc_indications_0_first;
      vcd_write_val(sim_hdl, num++, PORT_RDY_portalIfc_indications_0_notEmpty, 1u);
      backing.PORT_RDY_portalIfc_indications_0_notEmpty = PORT_RDY_portalIfc_indications_0_notEmpty;
      vcd_write_val(sim_hdl, num++, PORT_RDY_portalIfc_indications_1_deq, 1u);
      backing.PORT_RDY_portalIfc_indications_1_deq = PORT_RDY_portalIfc_indications_1_deq;
      vcd_write_val(sim_hdl, num++, PORT_RDY_portalIfc_indications_1_first, 1u);
      backing.PORT_RDY_portalIfc_indications_1_first = PORT_RDY_portalIfc_indications_1_first;
      vcd_write_val(sim_hdl, num++, PORT_RDY_portalIfc_indications_1_notEmpty, 1u);
      backing.PORT_RDY_portalIfc_indications_1_notEmpty = PORT_RDY_portalIfc_indications_1_notEmpty;
      vcd_write_val(sim_hdl, num++, PORT_RDY_portalIfc_intr_channel, 1u);
      backing.PORT_RDY_portalIfc_intr_channel = PORT_RDY_portalIfc_intr_channel;
      vcd_write_val(sim_hdl, num++, PORT_RDY_portalIfc_intr_status, 1u);
      backing.PORT_RDY_portalIfc_intr_status = PORT_RDY_portalIfc_intr_status;
      vcd_write_val(sim_hdl, num++, PORT_RDY_portalIfc_messageSize_size, 1u);
      backing.PORT_RDY_portalIfc_messageSize_size = PORT_RDY_portalIfc_messageSize_size;
      vcd_write_val(sim_hdl, num++, PORT_methods_returnOutputDDR_enq_v, 512u);
      backing.PORT_methods_returnOutputDDR_enq_v = PORT_methods_returnOutputDDR_enq_v;
      vcd_write_val(sim_hdl, num++, PORT_methods_returnOutputDDR_notFull, 1u);
      backing.PORT_methods_returnOutputDDR_notFull = PORT_methods_returnOutputDDR_notFull;
      vcd_write_val(sim_hdl, num++, PORT_methods_returnOutputSV_enq_v, 32u);
      backing.PORT_methods_returnOutputSV_enq_v = PORT_methods_returnOutputSV_enq_v;
      vcd_write_val(sim_hdl, num++, PORT_methods_returnOutputSV_notFull, 1u);
      backing.PORT_methods_returnOutputSV_notFull = PORT_methods_returnOutputSV_notFull;
      vcd_write_val(sim_hdl, num++, PORT_portalIfc_indications_0_first, 32u);
      backing.PORT_portalIfc_indications_0_first = PORT_portalIfc_indications_0_first;
      vcd_write_val(sim_hdl, num++, PORT_portalIfc_indications_0_notEmpty, 1u);
      backing.PORT_portalIfc_indications_0_notEmpty = PORT_portalIfc_indications_0_notEmpty;
      vcd_write_val(sim_hdl, num++, PORT_portalIfc_indications_1_first, 32u);
      backing.PORT_portalIfc_indications_1_first = PORT_portalIfc_indications_1_first;
      vcd_write_val(sim_hdl, num++, PORT_portalIfc_indications_1_notEmpty, 1u);
      backing.PORT_portalIfc_indications_1_notEmpty = PORT_portalIfc_indications_1_notEmpty;
      vcd_write_val(sim_hdl, num++, PORT_portalIfc_intr_channel, 32u);
      backing.PORT_portalIfc_intr_channel = PORT_portalIfc_intr_channel;
      vcd_write_val(sim_hdl, num++, PORT_portalIfc_intr_status, 1u);
      backing.PORT_portalIfc_intr_status = PORT_portalIfc_intr_status;
      vcd_write_val(sim_hdl, num++, PORT_portalIfc_messageSize_size, 16u);
      backing.PORT_portalIfc_messageSize_size = PORT_portalIfc_messageSize_size;
      vcd_write_val(sim_hdl, num++, PORT_portalIfc_messageSize_size_methodNumber, 16u);
      backing.PORT_portalIfc_messageSize_size_methodNumber = PORT_portalIfc_messageSize_size_methodNumber;
    }
}

void MOD_mkMyDutIndicationOutputPipes::vcd_prims(tVCDDumpType dt,
						 MOD_mkMyDutIndicationOutputPipes &backing)
{
  INST_returnOutputDDR_responseAdapter_bits.dump_VCD(dt,
						     backing.INST_returnOutputDDR_responseAdapter_bits);
  INST_returnOutputDDR_responseAdapter_count.dump_VCD(dt,
						      backing.INST_returnOutputDDR_responseAdapter_count);
  INST_returnOutputDDR_responseAdapter_notEmptyReg.dump_VCD(dt,
							    backing.INST_returnOutputDDR_responseAdapter_notEmptyReg);
  INST_returnOutputDDR_responseAdapter_shift.dump_VCD(dt,
						      backing.INST_returnOutputDDR_responseAdapter_shift);
  INST_returnOutputSV_responseAdapter_bits.dump_VCD(dt,
						    backing.INST_returnOutputSV_responseAdapter_bits);
  INST_returnOutputSV_responseAdapter_notEmptyReg.dump_VCD(dt,
							   backing.INST_returnOutputSV_responseAdapter_notEmptyReg);
  INST_returnOutputSV_responseAdapter_shift.dump_VCD(dt,
						     backing.INST_returnOutputSV_responseAdapter_shift);
}
