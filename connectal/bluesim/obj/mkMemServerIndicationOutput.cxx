/*
 * Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
 * 
 * On Sat Nov 16 22:39:52 EST 2019
 * 
 */
#include "bluesim_primitives.h"
#include "mkMemServerIndicationOutput.h"


/* Constructor */
MOD_mkMemServerIndicationOutput::MOD_mkMemServerIndicationOutput(tSimStateHdl simHdl,
								 char const *name,
								 Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_indicationPipes(simHdl, "indicationPipes", this),
    PORT_RST_N((tUInt8)1u),
    DEF_ifc_error_code_CONCAT_ifc_error_sglId_CONCAT_i_ETC___d2(192u),
    DEF_ifc_error_offset_CONCAT_ifc_error_extra___d1(128u)
{
  PORT_EN_ifc_error = false;
  PORT_EN_portalIfc_indications_0_deq = false;
  PORT_EN_portalIfc_indications_1_deq = false;
  PORT_EN_portalIfc_indications_2_deq = false;
  PORT_EN_portalIfc_indications_3_deq = false;
  PORT_EN_ifc_reportMemoryTraffic = false;
  PORT_EN_ifc_reportStateDbg = false;
  PORT_EN_ifc_addrResponse = false;
  PORT_portalIfc_messageSize_size_methodNumber = 0u;
  PORT_ifc_error_code = 0u;
  PORT_ifc_error_sglId = 0u;
  PORT_ifc_error_offset = 0llu;
  PORT_ifc_error_extra = 0llu;
  PORT_ifc_reportMemoryTraffic_words = 0llu;
  PORT_ifc_reportStateDbg_rec.setSize(128u);
  PORT_ifc_reportStateDbg_rec.clear();
  PORT_ifc_addrResponse_physAddr = 0llu;
  PORT_portalIfc_intr_channel = 0u;
  PORT_portalIfc_intr_status = false;
  PORT_portalIfc_messageSize_size = 0u;
  PORT_RDY_portalIfc_messageSize_size = false;
  PORT_RDY_portalIfc_intr_status = false;
  PORT_RDY_portalIfc_intr_channel = false;
  PORT_RDY_ifc_error = false;
  PORT_portalIfc_indications_0_first = 0u;
  PORT_RDY_portalIfc_indications_0_first = false;
  PORT_RDY_portalIfc_indications_0_deq = false;
  PORT_portalIfc_indications_0_notEmpty = false;
  PORT_RDY_portalIfc_indications_0_notEmpty = false;
  PORT_portalIfc_indications_1_first = 0u;
  PORT_RDY_portalIfc_indications_1_first = false;
  PORT_RDY_portalIfc_indications_1_deq = false;
  PORT_portalIfc_indications_1_notEmpty = false;
  PORT_RDY_portalIfc_indications_1_notEmpty = false;
  PORT_portalIfc_indications_2_first = 0u;
  PORT_RDY_portalIfc_indications_2_first = false;
  PORT_RDY_portalIfc_indications_2_deq = false;
  PORT_portalIfc_indications_2_notEmpty = false;
  PORT_RDY_portalIfc_indications_2_notEmpty = false;
  PORT_portalIfc_indications_3_first = 0u;
  PORT_RDY_portalIfc_indications_3_first = false;
  PORT_RDY_portalIfc_indications_3_deq = false;
  PORT_portalIfc_indications_3_notEmpty = false;
  PORT_RDY_portalIfc_indications_3_notEmpty = false;
  PORT_RDY_ifc_addrResponse = false;
  PORT_RDY_ifc_reportStateDbg = false;
  PORT_RDY_ifc_reportMemoryTraffic = false;
  symbol_count = 74u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkMemServerIndicationOutput::init_symbols_0()
{
  init_symbol(&symbols[0u], "CAN_FIRE_ifc_addrResponse", SYM_DEF, &DEF_CAN_FIRE_ifc_addrResponse, 1u);
  init_symbol(&symbols[1u], "CAN_FIRE_ifc_error", SYM_DEF, &DEF_CAN_FIRE_ifc_error, 1u);
  init_symbol(&symbols[2u],
	      "CAN_FIRE_ifc_reportMemoryTraffic",
	      SYM_DEF,
	      &DEF_CAN_FIRE_ifc_reportMemoryTraffic,
	      1u);
  init_symbol(&symbols[3u],
	      "CAN_FIRE_ifc_reportStateDbg",
	      SYM_DEF,
	      &DEF_CAN_FIRE_ifc_reportStateDbg,
	      1u);
  init_symbol(&symbols[4u],
	      "CAN_FIRE_portalIfc_indications_0_deq",
	      SYM_DEF,
	      &DEF_CAN_FIRE_portalIfc_indications_0_deq,
	      1u);
  init_symbol(&symbols[5u],
	      "CAN_FIRE_portalIfc_indications_0_first",
	      SYM_DEF,
	      &DEF_CAN_FIRE_portalIfc_indications_0_first,
	      1u);
  init_symbol(&symbols[6u],
	      "CAN_FIRE_portalIfc_indications_0_notEmpty",
	      SYM_DEF,
	      &DEF_CAN_FIRE_portalIfc_indications_0_notEmpty,
	      1u);
  init_symbol(&symbols[7u],
	      "CAN_FIRE_portalIfc_indications_1_deq",
	      SYM_DEF,
	      &DEF_CAN_FIRE_portalIfc_indications_1_deq,
	      1u);
  init_symbol(&symbols[8u],
	      "CAN_FIRE_portalIfc_indications_1_first",
	      SYM_DEF,
	      &DEF_CAN_FIRE_portalIfc_indications_1_first,
	      1u);
  init_symbol(&symbols[9u],
	      "CAN_FIRE_portalIfc_indications_1_notEmpty",
	      SYM_DEF,
	      &DEF_CAN_FIRE_portalIfc_indications_1_notEmpty,
	      1u);
  init_symbol(&symbols[10u],
	      "CAN_FIRE_portalIfc_indications_2_deq",
	      SYM_DEF,
	      &DEF_CAN_FIRE_portalIfc_indications_2_deq,
	      1u);
  init_symbol(&symbols[11u],
	      "CAN_FIRE_portalIfc_indications_2_first",
	      SYM_DEF,
	      &DEF_CAN_FIRE_portalIfc_indications_2_first,
	      1u);
  init_symbol(&symbols[12u],
	      "CAN_FIRE_portalIfc_indications_2_notEmpty",
	      SYM_DEF,
	      &DEF_CAN_FIRE_portalIfc_indications_2_notEmpty,
	      1u);
  init_symbol(&symbols[13u],
	      "CAN_FIRE_portalIfc_indications_3_deq",
	      SYM_DEF,
	      &DEF_CAN_FIRE_portalIfc_indications_3_deq,
	      1u);
  init_symbol(&symbols[14u],
	      "CAN_FIRE_portalIfc_indications_3_first",
	      SYM_DEF,
	      &DEF_CAN_FIRE_portalIfc_indications_3_first,
	      1u);
  init_symbol(&symbols[15u],
	      "CAN_FIRE_portalIfc_indications_3_notEmpty",
	      SYM_DEF,
	      &DEF_CAN_FIRE_portalIfc_indications_3_notEmpty,
	      1u);
  init_symbol(&symbols[16u],
	      "CAN_FIRE_portalIfc_intr_channel",
	      SYM_DEF,
	      &DEF_CAN_FIRE_portalIfc_intr_channel,
	      1u);
  init_symbol(&symbols[17u],
	      "CAN_FIRE_portalIfc_intr_status",
	      SYM_DEF,
	      &DEF_CAN_FIRE_portalIfc_intr_status,
	      1u);
  init_symbol(&symbols[18u],
	      "CAN_FIRE_portalIfc_messageSize_size",
	      SYM_DEF,
	      &DEF_CAN_FIRE_portalIfc_messageSize_size,
	      1u);
  init_symbol(&symbols[19u], "EN_ifc_addrResponse", SYM_PORT, &PORT_EN_ifc_addrResponse, 1u);
  init_symbol(&symbols[20u], "EN_ifc_error", SYM_PORT, &PORT_EN_ifc_error, 1u);
  init_symbol(&symbols[21u],
	      "EN_ifc_reportMemoryTraffic",
	      SYM_PORT,
	      &PORT_EN_ifc_reportMemoryTraffic,
	      1u);
  init_symbol(&symbols[22u], "EN_ifc_reportStateDbg", SYM_PORT, &PORT_EN_ifc_reportStateDbg, 1u);
  init_symbol(&symbols[23u],
	      "EN_portalIfc_indications_0_deq",
	      SYM_PORT,
	      &PORT_EN_portalIfc_indications_0_deq,
	      1u);
  init_symbol(&symbols[24u],
	      "EN_portalIfc_indications_1_deq",
	      SYM_PORT,
	      &PORT_EN_portalIfc_indications_1_deq,
	      1u);
  init_symbol(&symbols[25u],
	      "EN_portalIfc_indications_2_deq",
	      SYM_PORT,
	      &PORT_EN_portalIfc_indications_2_deq,
	      1u);
  init_symbol(&symbols[26u],
	      "EN_portalIfc_indications_3_deq",
	      SYM_PORT,
	      &PORT_EN_portalIfc_indications_3_deq,
	      1u);
  init_symbol(&symbols[27u],
	      "ifc_addrResponse_physAddr",
	      SYM_PORT,
	      &PORT_ifc_addrResponse_physAddr,
	      64u);
  init_symbol(&symbols[28u], "ifc_error_code", SYM_PORT, &PORT_ifc_error_code, 32u);
  init_symbol(&symbols[29u], "ifc_error_extra", SYM_PORT, &PORT_ifc_error_extra, 64u);
  init_symbol(&symbols[30u], "ifc_error_offset", SYM_PORT, &PORT_ifc_error_offset, 64u);
  init_symbol(&symbols[31u], "ifc_error_sglId", SYM_PORT, &PORT_ifc_error_sglId, 32u);
  init_symbol(&symbols[32u],
	      "ifc_reportMemoryTraffic_words",
	      SYM_PORT,
	      &PORT_ifc_reportMemoryTraffic_words,
	      64u);
  init_symbol(&symbols[33u], "ifc_reportStateDbg_rec", SYM_PORT, &PORT_ifc_reportStateDbg_rec, 128u);
  init_symbol(&symbols[34u], "indicationPipes", SYM_MODULE, &INST_indicationPipes);
  init_symbol(&symbols[35u],
	      "portalIfc_indications_0_first",
	      SYM_PORT,
	      &PORT_portalIfc_indications_0_first,
	      32u);
  init_symbol(&symbols[36u],
	      "portalIfc_indications_0_notEmpty",
	      SYM_PORT,
	      &PORT_portalIfc_indications_0_notEmpty,
	      1u);
  init_symbol(&symbols[37u],
	      "portalIfc_indications_1_first",
	      SYM_PORT,
	      &PORT_portalIfc_indications_1_first,
	      32u);
  init_symbol(&symbols[38u],
	      "portalIfc_indications_1_notEmpty",
	      SYM_PORT,
	      &PORT_portalIfc_indications_1_notEmpty,
	      1u);
  init_symbol(&symbols[39u],
	      "portalIfc_indications_2_first",
	      SYM_PORT,
	      &PORT_portalIfc_indications_2_first,
	      32u);
  init_symbol(&symbols[40u],
	      "portalIfc_indications_2_notEmpty",
	      SYM_PORT,
	      &PORT_portalIfc_indications_2_notEmpty,
	      1u);
  init_symbol(&symbols[41u],
	      "portalIfc_indications_3_first",
	      SYM_PORT,
	      &PORT_portalIfc_indications_3_first,
	      32u);
  init_symbol(&symbols[42u],
	      "portalIfc_indications_3_notEmpty",
	      SYM_PORT,
	      &PORT_portalIfc_indications_3_notEmpty,
	      1u);
  init_symbol(&symbols[43u], "portalIfc_intr_channel", SYM_PORT, &PORT_portalIfc_intr_channel, 32u);
  init_symbol(&symbols[44u], "portalIfc_intr_status", SYM_PORT, &PORT_portalIfc_intr_status, 1u);
  init_symbol(&symbols[45u],
	      "portalIfc_messageSize_size",
	      SYM_PORT,
	      &PORT_portalIfc_messageSize_size,
	      16u);
  init_symbol(&symbols[46u],
	      "portalIfc_messageSize_size_methodNumber",
	      SYM_PORT,
	      &PORT_portalIfc_messageSize_size_methodNumber,
	      16u);
  init_symbol(&symbols[47u], "RDY_ifc_addrResponse", SYM_PORT, &PORT_RDY_ifc_addrResponse, 1u);
  init_symbol(&symbols[48u], "RDY_ifc_error", SYM_PORT, &PORT_RDY_ifc_error, 1u);
  init_symbol(&symbols[49u],
	      "RDY_ifc_reportMemoryTraffic",
	      SYM_PORT,
	      &PORT_RDY_ifc_reportMemoryTraffic,
	      1u);
  init_symbol(&symbols[50u], "RDY_ifc_reportStateDbg", SYM_PORT, &PORT_RDY_ifc_reportStateDbg, 1u);
  init_symbol(&symbols[51u],
	      "RDY_portalIfc_indications_0_deq",
	      SYM_PORT,
	      &PORT_RDY_portalIfc_indications_0_deq,
	      1u);
  init_symbol(&symbols[52u],
	      "RDY_portalIfc_indications_0_first",
	      SYM_PORT,
	      &PORT_RDY_portalIfc_indications_0_first,
	      1u);
  init_symbol(&symbols[53u],
	      "RDY_portalIfc_indications_0_notEmpty",
	      SYM_PORT,
	      &PORT_RDY_portalIfc_indications_0_notEmpty,
	      1u);
  init_symbol(&symbols[54u],
	      "RDY_portalIfc_indications_1_deq",
	      SYM_PORT,
	      &PORT_RDY_portalIfc_indications_1_deq,
	      1u);
  init_symbol(&symbols[55u],
	      "RDY_portalIfc_indications_1_first",
	      SYM_PORT,
	      &PORT_RDY_portalIfc_indications_1_first,
	      1u);
  init_symbol(&symbols[56u],
	      "RDY_portalIfc_indications_1_notEmpty",
	      SYM_PORT,
	      &PORT_RDY_portalIfc_indications_1_notEmpty,
	      1u);
  init_symbol(&symbols[57u],
	      "RDY_portalIfc_indications_2_deq",
	      SYM_PORT,
	      &PORT_RDY_portalIfc_indications_2_deq,
	      1u);
  init_symbol(&symbols[58u],
	      "RDY_portalIfc_indications_2_first",
	      SYM_PORT,
	      &PORT_RDY_portalIfc_indications_2_first,
	      1u);
  init_symbol(&symbols[59u],
	      "RDY_portalIfc_indications_2_notEmpty",
	      SYM_PORT,
	      &PORT_RDY_portalIfc_indications_2_notEmpty,
	      1u);
  init_symbol(&symbols[60u],
	      "RDY_portalIfc_indications_3_deq",
	      SYM_PORT,
	      &PORT_RDY_portalIfc_indications_3_deq,
	      1u);
  init_symbol(&symbols[61u],
	      "RDY_portalIfc_indications_3_first",
	      SYM_PORT,
	      &PORT_RDY_portalIfc_indications_3_first,
	      1u);
  init_symbol(&symbols[62u],
	      "RDY_portalIfc_indications_3_notEmpty",
	      SYM_PORT,
	      &PORT_RDY_portalIfc_indications_3_notEmpty,
	      1u);
  init_symbol(&symbols[63u],
	      "RDY_portalIfc_intr_channel",
	      SYM_PORT,
	      &PORT_RDY_portalIfc_intr_channel,
	      1u);
  init_symbol(&symbols[64u],
	      "RDY_portalIfc_intr_status",
	      SYM_PORT,
	      &PORT_RDY_portalIfc_intr_status,
	      1u);
  init_symbol(&symbols[65u],
	      "RDY_portalIfc_messageSize_size",
	      SYM_PORT,
	      &PORT_RDY_portalIfc_messageSize_size,
	      1u);
  init_symbol(&symbols[66u],
	      "WILL_FIRE_ifc_addrResponse",
	      SYM_DEF,
	      &DEF_WILL_FIRE_ifc_addrResponse,
	      1u);
  init_symbol(&symbols[67u], "WILL_FIRE_ifc_error", SYM_DEF, &DEF_WILL_FIRE_ifc_error, 1u);
  init_symbol(&symbols[68u],
	      "WILL_FIRE_ifc_reportMemoryTraffic",
	      SYM_DEF,
	      &DEF_WILL_FIRE_ifc_reportMemoryTraffic,
	      1u);
  init_symbol(&symbols[69u],
	      "WILL_FIRE_ifc_reportStateDbg",
	      SYM_DEF,
	      &DEF_WILL_FIRE_ifc_reportStateDbg,
	      1u);
  init_symbol(&symbols[70u],
	      "WILL_FIRE_portalIfc_indications_0_deq",
	      SYM_DEF,
	      &DEF_WILL_FIRE_portalIfc_indications_0_deq,
	      1u);
  init_symbol(&symbols[71u],
	      "WILL_FIRE_portalIfc_indications_1_deq",
	      SYM_DEF,
	      &DEF_WILL_FIRE_portalIfc_indications_1_deq,
	      1u);
  init_symbol(&symbols[72u],
	      "WILL_FIRE_portalIfc_indications_2_deq",
	      SYM_DEF,
	      &DEF_WILL_FIRE_portalIfc_indications_2_deq,
	      1u);
  init_symbol(&symbols[73u],
	      "WILL_FIRE_portalIfc_indications_3_deq",
	      SYM_DEF,
	      &DEF_WILL_FIRE_portalIfc_indications_3_deq,
	      1u);
}


/* Rule actions */


/* Methods */

tUInt32 MOD_mkMemServerIndicationOutput::METH_portalIfc_messageSize_size(tUInt32 ARG_portalIfc_messageSize_size_methodNumber)
{
  PORT_portalIfc_messageSize_size_methodNumber = ARG_portalIfc_messageSize_size_methodNumber;
  PORT_portalIfc_messageSize_size = INST_indicationPipes.METH_portalIfc_messageSize_size(ARG_portalIfc_messageSize_size_methodNumber);
  return PORT_portalIfc_messageSize_size;
}

tUInt8 MOD_mkMemServerIndicationOutput::METH_RDY_portalIfc_messageSize_size()
{
  DEF_CAN_FIRE_portalIfc_messageSize_size = (tUInt8)1u;
  PORT_RDY_portalIfc_messageSize_size = DEF_CAN_FIRE_portalIfc_messageSize_size;
  return PORT_RDY_portalIfc_messageSize_size;
}

tUInt32 MOD_mkMemServerIndicationOutput::METH_portalIfc_indications_0_first()
{
  PORT_portalIfc_indications_0_first = INST_indicationPipes.METH_portalIfc_indications_0_first();
  return PORT_portalIfc_indications_0_first;
}

tUInt8 MOD_mkMemServerIndicationOutput::METH_RDY_portalIfc_indications_0_first()
{
  DEF_CAN_FIRE_portalIfc_indications_0_first = INST_indicationPipes.METH_RDY_portalIfc_indications_0_first();
  PORT_RDY_portalIfc_indications_0_first = DEF_CAN_FIRE_portalIfc_indications_0_first;
  return PORT_RDY_portalIfc_indications_0_first;
}

void MOD_mkMemServerIndicationOutput::METH_portalIfc_indications_0_deq()
{
  PORT_EN_portalIfc_indications_0_deq = (tUInt8)1u;
  DEF_WILL_FIRE_portalIfc_indications_0_deq = (tUInt8)1u;
  INST_indicationPipes.METH_portalIfc_indications_0_deq();
}

tUInt8 MOD_mkMemServerIndicationOutput::METH_RDY_portalIfc_indications_0_deq()
{
  DEF_CAN_FIRE_portalIfc_indications_0_deq = INST_indicationPipes.METH_RDY_portalIfc_indications_0_deq();
  PORT_RDY_portalIfc_indications_0_deq = DEF_CAN_FIRE_portalIfc_indications_0_deq;
  return PORT_RDY_portalIfc_indications_0_deq;
}

tUInt8 MOD_mkMemServerIndicationOutput::METH_portalIfc_indications_0_notEmpty()
{
  PORT_portalIfc_indications_0_notEmpty = INST_indicationPipes.METH_portalIfc_indications_0_notEmpty();
  return PORT_portalIfc_indications_0_notEmpty;
}

tUInt8 MOD_mkMemServerIndicationOutput::METH_RDY_portalIfc_indications_0_notEmpty()
{
  DEF_CAN_FIRE_portalIfc_indications_0_notEmpty = (tUInt8)1u;
  PORT_RDY_portalIfc_indications_0_notEmpty = DEF_CAN_FIRE_portalIfc_indications_0_notEmpty;
  return PORT_RDY_portalIfc_indications_0_notEmpty;
}

tUInt32 MOD_mkMemServerIndicationOutput::METH_portalIfc_indications_1_first()
{
  PORT_portalIfc_indications_1_first = INST_indicationPipes.METH_portalIfc_indications_1_first();
  return PORT_portalIfc_indications_1_first;
}

tUInt8 MOD_mkMemServerIndicationOutput::METH_RDY_portalIfc_indications_1_first()
{
  DEF_CAN_FIRE_portalIfc_indications_1_first = INST_indicationPipes.METH_RDY_portalIfc_indications_1_first();
  PORT_RDY_portalIfc_indications_1_first = DEF_CAN_FIRE_portalIfc_indications_1_first;
  return PORT_RDY_portalIfc_indications_1_first;
}

void MOD_mkMemServerIndicationOutput::METH_portalIfc_indications_1_deq()
{
  PORT_EN_portalIfc_indications_1_deq = (tUInt8)1u;
  DEF_WILL_FIRE_portalIfc_indications_1_deq = (tUInt8)1u;
  INST_indicationPipes.METH_portalIfc_indications_1_deq();
}

tUInt8 MOD_mkMemServerIndicationOutput::METH_RDY_portalIfc_indications_1_deq()
{
  DEF_CAN_FIRE_portalIfc_indications_1_deq = INST_indicationPipes.METH_RDY_portalIfc_indications_1_deq();
  PORT_RDY_portalIfc_indications_1_deq = DEF_CAN_FIRE_portalIfc_indications_1_deq;
  return PORT_RDY_portalIfc_indications_1_deq;
}

tUInt8 MOD_mkMemServerIndicationOutput::METH_portalIfc_indications_1_notEmpty()
{
  PORT_portalIfc_indications_1_notEmpty = INST_indicationPipes.METH_portalIfc_indications_1_notEmpty();
  return PORT_portalIfc_indications_1_notEmpty;
}

tUInt8 MOD_mkMemServerIndicationOutput::METH_RDY_portalIfc_indications_1_notEmpty()
{
  DEF_CAN_FIRE_portalIfc_indications_1_notEmpty = (tUInt8)1u;
  PORT_RDY_portalIfc_indications_1_notEmpty = DEF_CAN_FIRE_portalIfc_indications_1_notEmpty;
  return PORT_RDY_portalIfc_indications_1_notEmpty;
}

tUInt32 MOD_mkMemServerIndicationOutput::METH_portalIfc_indications_2_first()
{
  PORT_portalIfc_indications_2_first = INST_indicationPipes.METH_portalIfc_indications_2_first();
  return PORT_portalIfc_indications_2_first;
}

tUInt8 MOD_mkMemServerIndicationOutput::METH_RDY_portalIfc_indications_2_first()
{
  DEF_CAN_FIRE_portalIfc_indications_2_first = INST_indicationPipes.METH_RDY_portalIfc_indications_2_first();
  PORT_RDY_portalIfc_indications_2_first = DEF_CAN_FIRE_portalIfc_indications_2_first;
  return PORT_RDY_portalIfc_indications_2_first;
}

void MOD_mkMemServerIndicationOutput::METH_portalIfc_indications_2_deq()
{
  PORT_EN_portalIfc_indications_2_deq = (tUInt8)1u;
  DEF_WILL_FIRE_portalIfc_indications_2_deq = (tUInt8)1u;
  INST_indicationPipes.METH_portalIfc_indications_2_deq();
}

tUInt8 MOD_mkMemServerIndicationOutput::METH_RDY_portalIfc_indications_2_deq()
{
  DEF_CAN_FIRE_portalIfc_indications_2_deq = INST_indicationPipes.METH_RDY_portalIfc_indications_2_deq();
  PORT_RDY_portalIfc_indications_2_deq = DEF_CAN_FIRE_portalIfc_indications_2_deq;
  return PORT_RDY_portalIfc_indications_2_deq;
}

tUInt8 MOD_mkMemServerIndicationOutput::METH_portalIfc_indications_2_notEmpty()
{
  PORT_portalIfc_indications_2_notEmpty = INST_indicationPipes.METH_portalIfc_indications_2_notEmpty();
  return PORT_portalIfc_indications_2_notEmpty;
}

tUInt8 MOD_mkMemServerIndicationOutput::METH_RDY_portalIfc_indications_2_notEmpty()
{
  DEF_CAN_FIRE_portalIfc_indications_2_notEmpty = (tUInt8)1u;
  PORT_RDY_portalIfc_indications_2_notEmpty = DEF_CAN_FIRE_portalIfc_indications_2_notEmpty;
  return PORT_RDY_portalIfc_indications_2_notEmpty;
}

tUInt32 MOD_mkMemServerIndicationOutput::METH_portalIfc_indications_3_first()
{
  PORT_portalIfc_indications_3_first = INST_indicationPipes.METH_portalIfc_indications_3_first();
  return PORT_portalIfc_indications_3_first;
}

tUInt8 MOD_mkMemServerIndicationOutput::METH_RDY_portalIfc_indications_3_first()
{
  DEF_CAN_FIRE_portalIfc_indications_3_first = INST_indicationPipes.METH_RDY_portalIfc_indications_3_first();
  PORT_RDY_portalIfc_indications_3_first = DEF_CAN_FIRE_portalIfc_indications_3_first;
  return PORT_RDY_portalIfc_indications_3_first;
}

void MOD_mkMemServerIndicationOutput::METH_portalIfc_indications_3_deq()
{
  PORT_EN_portalIfc_indications_3_deq = (tUInt8)1u;
  DEF_WILL_FIRE_portalIfc_indications_3_deq = (tUInt8)1u;
  INST_indicationPipes.METH_portalIfc_indications_3_deq();
}

tUInt8 MOD_mkMemServerIndicationOutput::METH_RDY_portalIfc_indications_3_deq()
{
  DEF_CAN_FIRE_portalIfc_indications_3_deq = INST_indicationPipes.METH_RDY_portalIfc_indications_3_deq();
  PORT_RDY_portalIfc_indications_3_deq = DEF_CAN_FIRE_portalIfc_indications_3_deq;
  return PORT_RDY_portalIfc_indications_3_deq;
}

tUInt8 MOD_mkMemServerIndicationOutput::METH_portalIfc_indications_3_notEmpty()
{
  PORT_portalIfc_indications_3_notEmpty = INST_indicationPipes.METH_portalIfc_indications_3_notEmpty();
  return PORT_portalIfc_indications_3_notEmpty;
}

tUInt8 MOD_mkMemServerIndicationOutput::METH_RDY_portalIfc_indications_3_notEmpty()
{
  DEF_CAN_FIRE_portalIfc_indications_3_notEmpty = (tUInt8)1u;
  PORT_RDY_portalIfc_indications_3_notEmpty = DEF_CAN_FIRE_portalIfc_indications_3_notEmpty;
  return PORT_RDY_portalIfc_indications_3_notEmpty;
}

tUInt8 MOD_mkMemServerIndicationOutput::METH_portalIfc_intr_status()
{
  PORT_portalIfc_intr_status = INST_indicationPipes.METH_portalIfc_intr_status();
  return PORT_portalIfc_intr_status;
}

tUInt8 MOD_mkMemServerIndicationOutput::METH_RDY_portalIfc_intr_status()
{
  DEF_CAN_FIRE_portalIfc_intr_status = (tUInt8)1u;
  PORT_RDY_portalIfc_intr_status = DEF_CAN_FIRE_portalIfc_intr_status;
  return PORT_RDY_portalIfc_intr_status;
}

tUInt32 MOD_mkMemServerIndicationOutput::METH_portalIfc_intr_channel()
{
  PORT_portalIfc_intr_channel = INST_indicationPipes.METH_portalIfc_intr_channel();
  return PORT_portalIfc_intr_channel;
}

tUInt8 MOD_mkMemServerIndicationOutput::METH_RDY_portalIfc_intr_channel()
{
  DEF_CAN_FIRE_portalIfc_intr_channel = (tUInt8)1u;
  PORT_RDY_portalIfc_intr_channel = DEF_CAN_FIRE_portalIfc_intr_channel;
  return PORT_RDY_portalIfc_intr_channel;
}

void MOD_mkMemServerIndicationOutput::METH_ifc_addrResponse(tUInt64 ARG_ifc_addrResponse_physAddr)
{
  PORT_EN_ifc_addrResponse = (tUInt8)1u;
  DEF_WILL_FIRE_ifc_addrResponse = (tUInt8)1u;
  PORT_ifc_addrResponse_physAddr = ARG_ifc_addrResponse_physAddr;
  INST_indicationPipes.METH_methods_addrResponse_enq(ARG_ifc_addrResponse_physAddr);
}

tUInt8 MOD_mkMemServerIndicationOutput::METH_RDY_ifc_addrResponse()
{
  DEF_CAN_FIRE_ifc_addrResponse = INST_indicationPipes.METH_RDY_methods_addrResponse_enq();
  PORT_RDY_ifc_addrResponse = DEF_CAN_FIRE_ifc_addrResponse;
  return PORT_RDY_ifc_addrResponse;
}

void MOD_mkMemServerIndicationOutput::METH_ifc_reportStateDbg(tUWide ARG_ifc_reportStateDbg_rec)
{
  PORT_EN_ifc_reportStateDbg = (tUInt8)1u;
  DEF_WILL_FIRE_ifc_reportStateDbg = (tUInt8)1u;
  PORT_ifc_reportStateDbg_rec = ARG_ifc_reportStateDbg_rec;
  INST_indicationPipes.METH_methods_reportStateDbg_enq(ARG_ifc_reportStateDbg_rec);
}

tUInt8 MOD_mkMemServerIndicationOutput::METH_RDY_ifc_reportStateDbg()
{
  DEF_CAN_FIRE_ifc_reportStateDbg = INST_indicationPipes.METH_RDY_methods_reportStateDbg_enq();
  PORT_RDY_ifc_reportStateDbg = DEF_CAN_FIRE_ifc_reportStateDbg;
  return PORT_RDY_ifc_reportStateDbg;
}

void MOD_mkMemServerIndicationOutput::METH_ifc_reportMemoryTraffic(tUInt64 ARG_ifc_reportMemoryTraffic_words)
{
  PORT_EN_ifc_reportMemoryTraffic = (tUInt8)1u;
  DEF_WILL_FIRE_ifc_reportMemoryTraffic = (tUInt8)1u;
  PORT_ifc_reportMemoryTraffic_words = ARG_ifc_reportMemoryTraffic_words;
  INST_indicationPipes.METH_methods_reportMemoryTraffic_enq(ARG_ifc_reportMemoryTraffic_words);
}

tUInt8 MOD_mkMemServerIndicationOutput::METH_RDY_ifc_reportMemoryTraffic()
{
  DEF_CAN_FIRE_ifc_reportMemoryTraffic = INST_indicationPipes.METH_RDY_methods_reportMemoryTraffic_enq();
  PORT_RDY_ifc_reportMemoryTraffic = DEF_CAN_FIRE_ifc_reportMemoryTraffic;
  return PORT_RDY_ifc_reportMemoryTraffic;
}

void MOD_mkMemServerIndicationOutput::METH_ifc_error(tUInt32 ARG_ifc_error_code,
						     tUInt32 ARG_ifc_error_sglId,
						     tUInt64 ARG_ifc_error_offset,
						     tUInt64 ARG_ifc_error_extra)
{
  PORT_EN_ifc_error = (tUInt8)1u;
  DEF_WILL_FIRE_ifc_error = (tUInt8)1u;
  PORT_ifc_error_code = ARG_ifc_error_code;
  PORT_ifc_error_sglId = ARG_ifc_error_sglId;
  PORT_ifc_error_offset = ARG_ifc_error_offset;
  PORT_ifc_error_extra = ARG_ifc_error_extra;
  DEF_ifc_error_offset_CONCAT_ifc_error_extra___d1.set_whole_word((tUInt32)(ARG_ifc_error_offset >> 32u),
								  3u).build_concat((((tUInt64)((tUInt32)(ARG_ifc_error_offset))) << 32u) | (tUInt64)((tUInt32)(ARG_ifc_error_extra >> 32u)),
										   32u,
										   64u).set_whole_word((tUInt32)(ARG_ifc_error_extra),
												       0u);
  DEF_ifc_error_code_CONCAT_ifc_error_sglId_CONCAT_i_ETC___d2.build_concat(bs_wide_tmp(96u).set_whole_word(ARG_ifc_error_code,
													   2u).set_whole_word(ARG_ifc_error_sglId,
															      1u).set_whole_word(DEF_ifc_error_offset_CONCAT_ifc_error_extra___d1.get_whole_word(3u),
																		 0u),
									   96u,
									   96u).set_whole_word(DEF_ifc_error_offset_CONCAT_ifc_error_extra___d1.get_whole_word(2u),
											       2u).set_whole_word(DEF_ifc_error_offset_CONCAT_ifc_error_extra___d1.get_whole_word(1u),
														  1u).set_whole_word(DEF_ifc_error_offset_CONCAT_ifc_error_extra___d1.get_whole_word(0u),
																     0u);
  INST_indicationPipes.METH_methods_error_enq(DEF_ifc_error_code_CONCAT_ifc_error_sglId_CONCAT_i_ETC___d2);
}

tUInt8 MOD_mkMemServerIndicationOutput::METH_RDY_ifc_error()
{
  DEF_CAN_FIRE_ifc_error = INST_indicationPipes.METH_RDY_methods_error_enq();
  PORT_RDY_ifc_error = DEF_CAN_FIRE_ifc_error;
  return PORT_RDY_ifc_error;
}


/* Reset routines */

void MOD_mkMemServerIndicationOutput::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_indicationPipes.reset_RST_N(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkMemServerIndicationOutput::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkMemServerIndicationOutput::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_indicationPipes.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkMemServerIndicationOutput::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 76u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_ifc_addrResponse", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_ifc_error", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_ifc_reportMemoryTraffic", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_ifc_reportStateDbg", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_portalIfc_indications_0_deq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_portalIfc_indications_0_first", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_portalIfc_indications_0_notEmpty", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_portalIfc_indications_1_deq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_portalIfc_indications_1_first", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_portalIfc_indications_1_notEmpty", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_portalIfc_indications_2_deq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_portalIfc_indications_2_first", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_portalIfc_indications_2_notEmpty", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_portalIfc_indications_3_deq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_portalIfc_indications_3_first", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_portalIfc_indications_3_notEmpty", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_portalIfc_intr_channel", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_portalIfc_intr_status", 1u);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_portalIfc_messageSize_size", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_ifc_addrResponse", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_ifc_error", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_ifc_reportMemoryTraffic", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_ifc_reportStateDbg", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_portalIfc_indications_0_deq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_portalIfc_indications_1_deq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_portalIfc_indications_2_deq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_portalIfc_indications_3_deq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "ifc_error_code_CONCAT_ifc_error_sglId_CONCAT_i_ETC___d2", 192u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "ifc_error_offset_CONCAT_ifc_error_extra___d1", 128u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_ifc_addrResponse", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_ifc_error", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_ifc_reportMemoryTraffic", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_ifc_reportStateDbg", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_portalIfc_indications_0_deq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_portalIfc_indications_1_deq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_portalIfc_indications_2_deq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_portalIfc_indications_3_deq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_ifc_addrResponse", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_ifc_error", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_ifc_reportMemoryTraffic", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_ifc_reportStateDbg", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_portalIfc_indications_0_deq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_portalIfc_indications_0_first", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_portalIfc_indications_0_notEmpty", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_portalIfc_indications_1_deq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_portalIfc_indications_1_first", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_portalIfc_indications_1_notEmpty", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_portalIfc_indications_2_deq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_portalIfc_indications_2_first", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_portalIfc_indications_2_notEmpty", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_portalIfc_indications_3_deq", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_portalIfc_indications_3_first", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_portalIfc_indications_3_notEmpty", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_portalIfc_intr_channel", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "RDY_portalIfc_intr_status", 1u);
  vcd_write_def(sim_hdl, num++, "RDY_portalIfc_messageSize_size", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "ifc_addrResponse_physAddr", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "ifc_error_code", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "ifc_error_extra", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "ifc_error_offset", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "ifc_error_sglId", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "ifc_reportMemoryTraffic_words", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "ifc_reportStateDbg_rec", 128u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "portalIfc_indications_0_first", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "portalIfc_indications_0_notEmpty", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "portalIfc_indications_1_first", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "portalIfc_indications_1_notEmpty", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "portalIfc_indications_2_first", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "portalIfc_indications_2_notEmpty", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "portalIfc_indications_3_first", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "portalIfc_indications_3_notEmpty", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "portalIfc_intr_channel", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "portalIfc_intr_status", 1u);
  vcd_write_def(sim_hdl, num++, "portalIfc_messageSize_size", 16u);
  vcd_write_def(sim_hdl, num++, "portalIfc_messageSize_size_methodNumber", 16u);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_indicationPipes.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkMemServerIndicationOutput::dump_VCD(tVCDDumpType dt,
					       unsigned int levels,
					       MOD_mkMemServerIndicationOutput &backing)
{
  vcd_defs(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkMemServerIndicationOutput::vcd_defs(tVCDDumpType dt,
					       MOD_mkMemServerIndicationOutput &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 192u);
    vcd_write_x(sim_hdl, num++, 128u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 128u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 16u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_ifc_addrResponse) != DEF_CAN_FIRE_ifc_addrResponse)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_ifc_addrResponse, 1u);
	backing.DEF_CAN_FIRE_ifc_addrResponse = DEF_CAN_FIRE_ifc_addrResponse;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_ifc_error) != DEF_CAN_FIRE_ifc_error)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_ifc_error, 1u);
	backing.DEF_CAN_FIRE_ifc_error = DEF_CAN_FIRE_ifc_error;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_ifc_reportMemoryTraffic) != DEF_CAN_FIRE_ifc_reportMemoryTraffic)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_ifc_reportMemoryTraffic, 1u);
	backing.DEF_CAN_FIRE_ifc_reportMemoryTraffic = DEF_CAN_FIRE_ifc_reportMemoryTraffic;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_ifc_reportStateDbg) != DEF_CAN_FIRE_ifc_reportStateDbg)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_ifc_reportStateDbg, 1u);
	backing.DEF_CAN_FIRE_ifc_reportStateDbg = DEF_CAN_FIRE_ifc_reportStateDbg;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_portalIfc_indications_0_deq) != DEF_CAN_FIRE_portalIfc_indications_0_deq)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_portalIfc_indications_0_deq, 1u);
	backing.DEF_CAN_FIRE_portalIfc_indications_0_deq = DEF_CAN_FIRE_portalIfc_indications_0_deq;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_portalIfc_indications_0_first) != DEF_CAN_FIRE_portalIfc_indications_0_first)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_portalIfc_indications_0_first, 1u);
	backing.DEF_CAN_FIRE_portalIfc_indications_0_first = DEF_CAN_FIRE_portalIfc_indications_0_first;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_portalIfc_indications_0_notEmpty) != DEF_CAN_FIRE_portalIfc_indications_0_notEmpty)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_portalIfc_indications_0_notEmpty, 1u);
	backing.DEF_CAN_FIRE_portalIfc_indications_0_notEmpty = DEF_CAN_FIRE_portalIfc_indications_0_notEmpty;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_portalIfc_indications_1_deq) != DEF_CAN_FIRE_portalIfc_indications_1_deq)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_portalIfc_indications_1_deq, 1u);
	backing.DEF_CAN_FIRE_portalIfc_indications_1_deq = DEF_CAN_FIRE_portalIfc_indications_1_deq;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_portalIfc_indications_1_first) != DEF_CAN_FIRE_portalIfc_indications_1_first)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_portalIfc_indications_1_first, 1u);
	backing.DEF_CAN_FIRE_portalIfc_indications_1_first = DEF_CAN_FIRE_portalIfc_indications_1_first;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_portalIfc_indications_1_notEmpty) != DEF_CAN_FIRE_portalIfc_indications_1_notEmpty)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_portalIfc_indications_1_notEmpty, 1u);
	backing.DEF_CAN_FIRE_portalIfc_indications_1_notEmpty = DEF_CAN_FIRE_portalIfc_indications_1_notEmpty;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_portalIfc_indications_2_deq) != DEF_CAN_FIRE_portalIfc_indications_2_deq)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_portalIfc_indications_2_deq, 1u);
	backing.DEF_CAN_FIRE_portalIfc_indications_2_deq = DEF_CAN_FIRE_portalIfc_indications_2_deq;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_portalIfc_indications_2_first) != DEF_CAN_FIRE_portalIfc_indications_2_first)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_portalIfc_indications_2_first, 1u);
	backing.DEF_CAN_FIRE_portalIfc_indications_2_first = DEF_CAN_FIRE_portalIfc_indications_2_first;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_portalIfc_indications_2_notEmpty) != DEF_CAN_FIRE_portalIfc_indications_2_notEmpty)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_portalIfc_indications_2_notEmpty, 1u);
	backing.DEF_CAN_FIRE_portalIfc_indications_2_notEmpty = DEF_CAN_FIRE_portalIfc_indications_2_notEmpty;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_portalIfc_indications_3_deq) != DEF_CAN_FIRE_portalIfc_indications_3_deq)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_portalIfc_indications_3_deq, 1u);
	backing.DEF_CAN_FIRE_portalIfc_indications_3_deq = DEF_CAN_FIRE_portalIfc_indications_3_deq;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_portalIfc_indications_3_first) != DEF_CAN_FIRE_portalIfc_indications_3_first)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_portalIfc_indications_3_first, 1u);
	backing.DEF_CAN_FIRE_portalIfc_indications_3_first = DEF_CAN_FIRE_portalIfc_indications_3_first;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_portalIfc_indications_3_notEmpty) != DEF_CAN_FIRE_portalIfc_indications_3_notEmpty)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_portalIfc_indications_3_notEmpty, 1u);
	backing.DEF_CAN_FIRE_portalIfc_indications_3_notEmpty = DEF_CAN_FIRE_portalIfc_indications_3_notEmpty;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_portalIfc_intr_channel) != DEF_CAN_FIRE_portalIfc_intr_channel)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_portalIfc_intr_channel, 1u);
	backing.DEF_CAN_FIRE_portalIfc_intr_channel = DEF_CAN_FIRE_portalIfc_intr_channel;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_portalIfc_intr_status) != DEF_CAN_FIRE_portalIfc_intr_status)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_portalIfc_intr_status, 1u);
	backing.DEF_CAN_FIRE_portalIfc_intr_status = DEF_CAN_FIRE_portalIfc_intr_status;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_portalIfc_messageSize_size) != DEF_CAN_FIRE_portalIfc_messageSize_size)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_portalIfc_messageSize_size, 1u);
	backing.DEF_CAN_FIRE_portalIfc_messageSize_size = DEF_CAN_FIRE_portalIfc_messageSize_size;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_ifc_addrResponse) != DEF_WILL_FIRE_ifc_addrResponse)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_ifc_addrResponse, 1u);
	backing.DEF_WILL_FIRE_ifc_addrResponse = DEF_WILL_FIRE_ifc_addrResponse;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_ifc_error) != DEF_WILL_FIRE_ifc_error)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_ifc_error, 1u);
	backing.DEF_WILL_FIRE_ifc_error = DEF_WILL_FIRE_ifc_error;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_ifc_reportMemoryTraffic) != DEF_WILL_FIRE_ifc_reportMemoryTraffic)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_ifc_reportMemoryTraffic, 1u);
	backing.DEF_WILL_FIRE_ifc_reportMemoryTraffic = DEF_WILL_FIRE_ifc_reportMemoryTraffic;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_ifc_reportStateDbg) != DEF_WILL_FIRE_ifc_reportStateDbg)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_ifc_reportStateDbg, 1u);
	backing.DEF_WILL_FIRE_ifc_reportStateDbg = DEF_WILL_FIRE_ifc_reportStateDbg;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_portalIfc_indications_0_deq) != DEF_WILL_FIRE_portalIfc_indications_0_deq)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_portalIfc_indications_0_deq, 1u);
	backing.DEF_WILL_FIRE_portalIfc_indications_0_deq = DEF_WILL_FIRE_portalIfc_indications_0_deq;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_portalIfc_indications_1_deq) != DEF_WILL_FIRE_portalIfc_indications_1_deq)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_portalIfc_indications_1_deq, 1u);
	backing.DEF_WILL_FIRE_portalIfc_indications_1_deq = DEF_WILL_FIRE_portalIfc_indications_1_deq;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_portalIfc_indications_2_deq) != DEF_WILL_FIRE_portalIfc_indications_2_deq)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_portalIfc_indications_2_deq, 1u);
	backing.DEF_WILL_FIRE_portalIfc_indications_2_deq = DEF_WILL_FIRE_portalIfc_indications_2_deq;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_portalIfc_indications_3_deq) != DEF_WILL_FIRE_portalIfc_indications_3_deq)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_portalIfc_indications_3_deq, 1u);
	backing.DEF_WILL_FIRE_portalIfc_indications_3_deq = DEF_WILL_FIRE_portalIfc_indications_3_deq;
      }
      ++num;
      if ((backing.DEF_ifc_error_code_CONCAT_ifc_error_sglId_CONCAT_i_ETC___d2) != DEF_ifc_error_code_CONCAT_ifc_error_sglId_CONCAT_i_ETC___d2)
      {
	vcd_write_val(sim_hdl, num, DEF_ifc_error_code_CONCAT_ifc_error_sglId_CONCAT_i_ETC___d2, 192u);
	backing.DEF_ifc_error_code_CONCAT_ifc_error_sglId_CONCAT_i_ETC___d2 = DEF_ifc_error_code_CONCAT_ifc_error_sglId_CONCAT_i_ETC___d2;
      }
      ++num;
      if ((backing.DEF_ifc_error_offset_CONCAT_ifc_error_extra___d1) != DEF_ifc_error_offset_CONCAT_ifc_error_extra___d1)
      {
	vcd_write_val(sim_hdl, num, DEF_ifc_error_offset_CONCAT_ifc_error_extra___d1, 128u);
	backing.DEF_ifc_error_offset_CONCAT_ifc_error_extra___d1 = DEF_ifc_error_offset_CONCAT_ifc_error_extra___d1;
      }
      ++num;
      if ((backing.PORT_EN_ifc_addrResponse) != PORT_EN_ifc_addrResponse)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_ifc_addrResponse, 1u);
	backing.PORT_EN_ifc_addrResponse = PORT_EN_ifc_addrResponse;
      }
      ++num;
      if ((backing.PORT_EN_ifc_error) != PORT_EN_ifc_error)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_ifc_error, 1u);
	backing.PORT_EN_ifc_error = PORT_EN_ifc_error;
      }
      ++num;
      if ((backing.PORT_EN_ifc_reportMemoryTraffic) != PORT_EN_ifc_reportMemoryTraffic)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_ifc_reportMemoryTraffic, 1u);
	backing.PORT_EN_ifc_reportMemoryTraffic = PORT_EN_ifc_reportMemoryTraffic;
      }
      ++num;
      if ((backing.PORT_EN_ifc_reportStateDbg) != PORT_EN_ifc_reportStateDbg)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_ifc_reportStateDbg, 1u);
	backing.PORT_EN_ifc_reportStateDbg = PORT_EN_ifc_reportStateDbg;
      }
      ++num;
      if ((backing.PORT_EN_portalIfc_indications_0_deq) != PORT_EN_portalIfc_indications_0_deq)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_portalIfc_indications_0_deq, 1u);
	backing.PORT_EN_portalIfc_indications_0_deq = PORT_EN_portalIfc_indications_0_deq;
      }
      ++num;
      if ((backing.PORT_EN_portalIfc_indications_1_deq) != PORT_EN_portalIfc_indications_1_deq)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_portalIfc_indications_1_deq, 1u);
	backing.PORT_EN_portalIfc_indications_1_deq = PORT_EN_portalIfc_indications_1_deq;
      }
      ++num;
      if ((backing.PORT_EN_portalIfc_indications_2_deq) != PORT_EN_portalIfc_indications_2_deq)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_portalIfc_indications_2_deq, 1u);
	backing.PORT_EN_portalIfc_indications_2_deq = PORT_EN_portalIfc_indications_2_deq;
      }
      ++num;
      if ((backing.PORT_EN_portalIfc_indications_3_deq) != PORT_EN_portalIfc_indications_3_deq)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_portalIfc_indications_3_deq, 1u);
	backing.PORT_EN_portalIfc_indications_3_deq = PORT_EN_portalIfc_indications_3_deq;
      }
      ++num;
      if ((backing.PORT_RDY_ifc_addrResponse) != PORT_RDY_ifc_addrResponse)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_ifc_addrResponse, 1u);
	backing.PORT_RDY_ifc_addrResponse = PORT_RDY_ifc_addrResponse;
      }
      ++num;
      if ((backing.PORT_RDY_ifc_error) != PORT_RDY_ifc_error)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_ifc_error, 1u);
	backing.PORT_RDY_ifc_error = PORT_RDY_ifc_error;
      }
      ++num;
      if ((backing.PORT_RDY_ifc_reportMemoryTraffic) != PORT_RDY_ifc_reportMemoryTraffic)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_ifc_reportMemoryTraffic, 1u);
	backing.PORT_RDY_ifc_reportMemoryTraffic = PORT_RDY_ifc_reportMemoryTraffic;
      }
      ++num;
      if ((backing.PORT_RDY_ifc_reportStateDbg) != PORT_RDY_ifc_reportStateDbg)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_ifc_reportStateDbg, 1u);
	backing.PORT_RDY_ifc_reportStateDbg = PORT_RDY_ifc_reportStateDbg;
      }
      ++num;
      if ((backing.PORT_RDY_portalIfc_indications_0_deq) != PORT_RDY_portalIfc_indications_0_deq)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_portalIfc_indications_0_deq, 1u);
	backing.PORT_RDY_portalIfc_indications_0_deq = PORT_RDY_portalIfc_indications_0_deq;
      }
      ++num;
      if ((backing.PORT_RDY_portalIfc_indications_0_first) != PORT_RDY_portalIfc_indications_0_first)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_portalIfc_indications_0_first, 1u);
	backing.PORT_RDY_portalIfc_indications_0_first = PORT_RDY_portalIfc_indications_0_first;
      }
      ++num;
      if ((backing.PORT_RDY_portalIfc_indications_0_notEmpty) != PORT_RDY_portalIfc_indications_0_notEmpty)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_portalIfc_indications_0_notEmpty, 1u);
	backing.PORT_RDY_portalIfc_indications_0_notEmpty = PORT_RDY_portalIfc_indications_0_notEmpty;
      }
      ++num;
      if ((backing.PORT_RDY_portalIfc_indications_1_deq) != PORT_RDY_portalIfc_indications_1_deq)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_portalIfc_indications_1_deq, 1u);
	backing.PORT_RDY_portalIfc_indications_1_deq = PORT_RDY_portalIfc_indications_1_deq;
      }
      ++num;
      if ((backing.PORT_RDY_portalIfc_indications_1_first) != PORT_RDY_portalIfc_indications_1_first)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_portalIfc_indications_1_first, 1u);
	backing.PORT_RDY_portalIfc_indications_1_first = PORT_RDY_portalIfc_indications_1_first;
      }
      ++num;
      if ((backing.PORT_RDY_portalIfc_indications_1_notEmpty) != PORT_RDY_portalIfc_indications_1_notEmpty)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_portalIfc_indications_1_notEmpty, 1u);
	backing.PORT_RDY_portalIfc_indications_1_notEmpty = PORT_RDY_portalIfc_indications_1_notEmpty;
      }
      ++num;
      if ((backing.PORT_RDY_portalIfc_indications_2_deq) != PORT_RDY_portalIfc_indications_2_deq)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_portalIfc_indications_2_deq, 1u);
	backing.PORT_RDY_portalIfc_indications_2_deq = PORT_RDY_portalIfc_indications_2_deq;
      }
      ++num;
      if ((backing.PORT_RDY_portalIfc_indications_2_first) != PORT_RDY_portalIfc_indications_2_first)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_portalIfc_indications_2_first, 1u);
	backing.PORT_RDY_portalIfc_indications_2_first = PORT_RDY_portalIfc_indications_2_first;
      }
      ++num;
      if ((backing.PORT_RDY_portalIfc_indications_2_notEmpty) != PORT_RDY_portalIfc_indications_2_notEmpty)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_portalIfc_indications_2_notEmpty, 1u);
	backing.PORT_RDY_portalIfc_indications_2_notEmpty = PORT_RDY_portalIfc_indications_2_notEmpty;
      }
      ++num;
      if ((backing.PORT_RDY_portalIfc_indications_3_deq) != PORT_RDY_portalIfc_indications_3_deq)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_portalIfc_indications_3_deq, 1u);
	backing.PORT_RDY_portalIfc_indications_3_deq = PORT_RDY_portalIfc_indications_3_deq;
      }
      ++num;
      if ((backing.PORT_RDY_portalIfc_indications_3_first) != PORT_RDY_portalIfc_indications_3_first)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_portalIfc_indications_3_first, 1u);
	backing.PORT_RDY_portalIfc_indications_3_first = PORT_RDY_portalIfc_indications_3_first;
      }
      ++num;
      if ((backing.PORT_RDY_portalIfc_indications_3_notEmpty) != PORT_RDY_portalIfc_indications_3_notEmpty)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_portalIfc_indications_3_notEmpty, 1u);
	backing.PORT_RDY_portalIfc_indications_3_notEmpty = PORT_RDY_portalIfc_indications_3_notEmpty;
      }
      ++num;
      if ((backing.PORT_RDY_portalIfc_intr_channel) != PORT_RDY_portalIfc_intr_channel)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_portalIfc_intr_channel, 1u);
	backing.PORT_RDY_portalIfc_intr_channel = PORT_RDY_portalIfc_intr_channel;
      }
      ++num;
      if ((backing.PORT_RDY_portalIfc_intr_status) != PORT_RDY_portalIfc_intr_status)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_portalIfc_intr_status, 1u);
	backing.PORT_RDY_portalIfc_intr_status = PORT_RDY_portalIfc_intr_status;
      }
      ++num;
      if ((backing.PORT_RDY_portalIfc_messageSize_size) != PORT_RDY_portalIfc_messageSize_size)
      {
	vcd_write_val(sim_hdl, num, PORT_RDY_portalIfc_messageSize_size, 1u);
	backing.PORT_RDY_portalIfc_messageSize_size = PORT_RDY_portalIfc_messageSize_size;
      }
      ++num;
      if ((backing.PORT_ifc_addrResponse_physAddr) != PORT_ifc_addrResponse_physAddr)
      {
	vcd_write_val(sim_hdl, num, PORT_ifc_addrResponse_physAddr, 64u);
	backing.PORT_ifc_addrResponse_physAddr = PORT_ifc_addrResponse_physAddr;
      }
      ++num;
      if ((backing.PORT_ifc_error_code) != PORT_ifc_error_code)
      {
	vcd_write_val(sim_hdl, num, PORT_ifc_error_code, 32u);
	backing.PORT_ifc_error_code = PORT_ifc_error_code;
      }
      ++num;
      if ((backing.PORT_ifc_error_extra) != PORT_ifc_error_extra)
      {
	vcd_write_val(sim_hdl, num, PORT_ifc_error_extra, 64u);
	backing.PORT_ifc_error_extra = PORT_ifc_error_extra;
      }
      ++num;
      if ((backing.PORT_ifc_error_offset) != PORT_ifc_error_offset)
      {
	vcd_write_val(sim_hdl, num, PORT_ifc_error_offset, 64u);
	backing.PORT_ifc_error_offset = PORT_ifc_error_offset;
      }
      ++num;
      if ((backing.PORT_ifc_error_sglId) != PORT_ifc_error_sglId)
      {
	vcd_write_val(sim_hdl, num, PORT_ifc_error_sglId, 32u);
	backing.PORT_ifc_error_sglId = PORT_ifc_error_sglId;
      }
      ++num;
      if ((backing.PORT_ifc_reportMemoryTraffic_words) != PORT_ifc_reportMemoryTraffic_words)
      {
	vcd_write_val(sim_hdl, num, PORT_ifc_reportMemoryTraffic_words, 64u);
	backing.PORT_ifc_reportMemoryTraffic_words = PORT_ifc_reportMemoryTraffic_words;
      }
      ++num;
      if ((backing.PORT_ifc_reportStateDbg_rec) != PORT_ifc_reportStateDbg_rec)
      {
	vcd_write_val(sim_hdl, num, PORT_ifc_reportStateDbg_rec, 128u);
	backing.PORT_ifc_reportStateDbg_rec = PORT_ifc_reportStateDbg_rec;
      }
      ++num;
      if ((backing.PORT_portalIfc_indications_0_first) != PORT_portalIfc_indications_0_first)
      {
	vcd_write_val(sim_hdl, num, PORT_portalIfc_indications_0_first, 32u);
	backing.PORT_portalIfc_indications_0_first = PORT_portalIfc_indications_0_first;
      }
      ++num;
      if ((backing.PORT_portalIfc_indications_0_notEmpty) != PORT_portalIfc_indications_0_notEmpty)
      {
	vcd_write_val(sim_hdl, num, PORT_portalIfc_indications_0_notEmpty, 1u);
	backing.PORT_portalIfc_indications_0_notEmpty = PORT_portalIfc_indications_0_notEmpty;
      }
      ++num;
      if ((backing.PORT_portalIfc_indications_1_first) != PORT_portalIfc_indications_1_first)
      {
	vcd_write_val(sim_hdl, num, PORT_portalIfc_indications_1_first, 32u);
	backing.PORT_portalIfc_indications_1_first = PORT_portalIfc_indications_1_first;
      }
      ++num;
      if ((backing.PORT_portalIfc_indications_1_notEmpty) != PORT_portalIfc_indications_1_notEmpty)
      {
	vcd_write_val(sim_hdl, num, PORT_portalIfc_indications_1_notEmpty, 1u);
	backing.PORT_portalIfc_indications_1_notEmpty = PORT_portalIfc_indications_1_notEmpty;
      }
      ++num;
      if ((backing.PORT_portalIfc_indications_2_first) != PORT_portalIfc_indications_2_first)
      {
	vcd_write_val(sim_hdl, num, PORT_portalIfc_indications_2_first, 32u);
	backing.PORT_portalIfc_indications_2_first = PORT_portalIfc_indications_2_first;
      }
      ++num;
      if ((backing.PORT_portalIfc_indications_2_notEmpty) != PORT_portalIfc_indications_2_notEmpty)
      {
	vcd_write_val(sim_hdl, num, PORT_portalIfc_indications_2_notEmpty, 1u);
	backing.PORT_portalIfc_indications_2_notEmpty = PORT_portalIfc_indications_2_notEmpty;
      }
      ++num;
      if ((backing.PORT_portalIfc_indications_3_first) != PORT_portalIfc_indications_3_first)
      {
	vcd_write_val(sim_hdl, num, PORT_portalIfc_indications_3_first, 32u);
	backing.PORT_portalIfc_indications_3_first = PORT_portalIfc_indications_3_first;
      }
      ++num;
      if ((backing.PORT_portalIfc_indications_3_notEmpty) != PORT_portalIfc_indications_3_notEmpty)
      {
	vcd_write_val(sim_hdl, num, PORT_portalIfc_indications_3_notEmpty, 1u);
	backing.PORT_portalIfc_indications_3_notEmpty = PORT_portalIfc_indications_3_notEmpty;
      }
      ++num;
      if ((backing.PORT_portalIfc_intr_channel) != PORT_portalIfc_intr_channel)
      {
	vcd_write_val(sim_hdl, num, PORT_portalIfc_intr_channel, 32u);
	backing.PORT_portalIfc_intr_channel = PORT_portalIfc_intr_channel;
      }
      ++num;
      if ((backing.PORT_portalIfc_intr_status) != PORT_portalIfc_intr_status)
      {
	vcd_write_val(sim_hdl, num, PORT_portalIfc_intr_status, 1u);
	backing.PORT_portalIfc_intr_status = PORT_portalIfc_intr_status;
      }
      ++num;
      if ((backing.PORT_portalIfc_messageSize_size) != PORT_portalIfc_messageSize_size)
      {
	vcd_write_val(sim_hdl, num, PORT_portalIfc_messageSize_size, 16u);
	backing.PORT_portalIfc_messageSize_size = PORT_portalIfc_messageSize_size;
      }
      ++num;
      if ((backing.PORT_portalIfc_messageSize_size_methodNumber) != PORT_portalIfc_messageSize_size_methodNumber)
      {
	vcd_write_val(sim_hdl, num, PORT_portalIfc_messageSize_size_methodNumber, 16u);
	backing.PORT_portalIfc_messageSize_size_methodNumber = PORT_portalIfc_messageSize_size_methodNumber;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_ifc_addrResponse, 1u);
      backing.DEF_CAN_FIRE_ifc_addrResponse = DEF_CAN_FIRE_ifc_addrResponse;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_ifc_error, 1u);
      backing.DEF_CAN_FIRE_ifc_error = DEF_CAN_FIRE_ifc_error;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_ifc_reportMemoryTraffic, 1u);
      backing.DEF_CAN_FIRE_ifc_reportMemoryTraffic = DEF_CAN_FIRE_ifc_reportMemoryTraffic;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_ifc_reportStateDbg, 1u);
      backing.DEF_CAN_FIRE_ifc_reportStateDbg = DEF_CAN_FIRE_ifc_reportStateDbg;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_portalIfc_indications_0_deq, 1u);
      backing.DEF_CAN_FIRE_portalIfc_indications_0_deq = DEF_CAN_FIRE_portalIfc_indications_0_deq;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_portalIfc_indications_0_first, 1u);
      backing.DEF_CAN_FIRE_portalIfc_indications_0_first = DEF_CAN_FIRE_portalIfc_indications_0_first;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_portalIfc_indications_0_notEmpty, 1u);
      backing.DEF_CAN_FIRE_portalIfc_indications_0_notEmpty = DEF_CAN_FIRE_portalIfc_indications_0_notEmpty;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_portalIfc_indications_1_deq, 1u);
      backing.DEF_CAN_FIRE_portalIfc_indications_1_deq = DEF_CAN_FIRE_portalIfc_indications_1_deq;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_portalIfc_indications_1_first, 1u);
      backing.DEF_CAN_FIRE_portalIfc_indications_1_first = DEF_CAN_FIRE_portalIfc_indications_1_first;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_portalIfc_indications_1_notEmpty, 1u);
      backing.DEF_CAN_FIRE_portalIfc_indications_1_notEmpty = DEF_CAN_FIRE_portalIfc_indications_1_notEmpty;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_portalIfc_indications_2_deq, 1u);
      backing.DEF_CAN_FIRE_portalIfc_indications_2_deq = DEF_CAN_FIRE_portalIfc_indications_2_deq;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_portalIfc_indications_2_first, 1u);
      backing.DEF_CAN_FIRE_portalIfc_indications_2_first = DEF_CAN_FIRE_portalIfc_indications_2_first;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_portalIfc_indications_2_notEmpty, 1u);
      backing.DEF_CAN_FIRE_portalIfc_indications_2_notEmpty = DEF_CAN_FIRE_portalIfc_indications_2_notEmpty;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_portalIfc_indications_3_deq, 1u);
      backing.DEF_CAN_FIRE_portalIfc_indications_3_deq = DEF_CAN_FIRE_portalIfc_indications_3_deq;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_portalIfc_indications_3_first, 1u);
      backing.DEF_CAN_FIRE_portalIfc_indications_3_first = DEF_CAN_FIRE_portalIfc_indications_3_first;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_portalIfc_indications_3_notEmpty, 1u);
      backing.DEF_CAN_FIRE_portalIfc_indications_3_notEmpty = DEF_CAN_FIRE_portalIfc_indications_3_notEmpty;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_portalIfc_intr_channel, 1u);
      backing.DEF_CAN_FIRE_portalIfc_intr_channel = DEF_CAN_FIRE_portalIfc_intr_channel;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_portalIfc_intr_status, 1u);
      backing.DEF_CAN_FIRE_portalIfc_intr_status = DEF_CAN_FIRE_portalIfc_intr_status;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_portalIfc_messageSize_size, 1u);
      backing.DEF_CAN_FIRE_portalIfc_messageSize_size = DEF_CAN_FIRE_portalIfc_messageSize_size;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_ifc_addrResponse, 1u);
      backing.DEF_WILL_FIRE_ifc_addrResponse = DEF_WILL_FIRE_ifc_addrResponse;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_ifc_error, 1u);
      backing.DEF_WILL_FIRE_ifc_error = DEF_WILL_FIRE_ifc_error;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_ifc_reportMemoryTraffic, 1u);
      backing.DEF_WILL_FIRE_ifc_reportMemoryTraffic = DEF_WILL_FIRE_ifc_reportMemoryTraffic;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_ifc_reportStateDbg, 1u);
      backing.DEF_WILL_FIRE_ifc_reportStateDbg = DEF_WILL_FIRE_ifc_reportStateDbg;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_portalIfc_indications_0_deq, 1u);
      backing.DEF_WILL_FIRE_portalIfc_indications_0_deq = DEF_WILL_FIRE_portalIfc_indications_0_deq;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_portalIfc_indications_1_deq, 1u);
      backing.DEF_WILL_FIRE_portalIfc_indications_1_deq = DEF_WILL_FIRE_portalIfc_indications_1_deq;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_portalIfc_indications_2_deq, 1u);
      backing.DEF_WILL_FIRE_portalIfc_indications_2_deq = DEF_WILL_FIRE_portalIfc_indications_2_deq;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_portalIfc_indications_3_deq, 1u);
      backing.DEF_WILL_FIRE_portalIfc_indications_3_deq = DEF_WILL_FIRE_portalIfc_indications_3_deq;
      vcd_write_val(sim_hdl, num++, DEF_ifc_error_code_CONCAT_ifc_error_sglId_CONCAT_i_ETC___d2, 192u);
      backing.DEF_ifc_error_code_CONCAT_ifc_error_sglId_CONCAT_i_ETC___d2 = DEF_ifc_error_code_CONCAT_ifc_error_sglId_CONCAT_i_ETC___d2;
      vcd_write_val(sim_hdl, num++, DEF_ifc_error_offset_CONCAT_ifc_error_extra___d1, 128u);
      backing.DEF_ifc_error_offset_CONCAT_ifc_error_extra___d1 = DEF_ifc_error_offset_CONCAT_ifc_error_extra___d1;
      vcd_write_val(sim_hdl, num++, PORT_EN_ifc_addrResponse, 1u);
      backing.PORT_EN_ifc_addrResponse = PORT_EN_ifc_addrResponse;
      vcd_write_val(sim_hdl, num++, PORT_EN_ifc_error, 1u);
      backing.PORT_EN_ifc_error = PORT_EN_ifc_error;
      vcd_write_val(sim_hdl, num++, PORT_EN_ifc_reportMemoryTraffic, 1u);
      backing.PORT_EN_ifc_reportMemoryTraffic = PORT_EN_ifc_reportMemoryTraffic;
      vcd_write_val(sim_hdl, num++, PORT_EN_ifc_reportStateDbg, 1u);
      backing.PORT_EN_ifc_reportStateDbg = PORT_EN_ifc_reportStateDbg;
      vcd_write_val(sim_hdl, num++, PORT_EN_portalIfc_indications_0_deq, 1u);
      backing.PORT_EN_portalIfc_indications_0_deq = PORT_EN_portalIfc_indications_0_deq;
      vcd_write_val(sim_hdl, num++, PORT_EN_portalIfc_indications_1_deq, 1u);
      backing.PORT_EN_portalIfc_indications_1_deq = PORT_EN_portalIfc_indications_1_deq;
      vcd_write_val(sim_hdl, num++, PORT_EN_portalIfc_indications_2_deq, 1u);
      backing.PORT_EN_portalIfc_indications_2_deq = PORT_EN_portalIfc_indications_2_deq;
      vcd_write_val(sim_hdl, num++, PORT_EN_portalIfc_indications_3_deq, 1u);
      backing.PORT_EN_portalIfc_indications_3_deq = PORT_EN_portalIfc_indications_3_deq;
      vcd_write_val(sim_hdl, num++, PORT_RDY_ifc_addrResponse, 1u);
      backing.PORT_RDY_ifc_addrResponse = PORT_RDY_ifc_addrResponse;
      vcd_write_val(sim_hdl, num++, PORT_RDY_ifc_error, 1u);
      backing.PORT_RDY_ifc_error = PORT_RDY_ifc_error;
      vcd_write_val(sim_hdl, num++, PORT_RDY_ifc_reportMemoryTraffic, 1u);
      backing.PORT_RDY_ifc_reportMemoryTraffic = PORT_RDY_ifc_reportMemoryTraffic;
      vcd_write_val(sim_hdl, num++, PORT_RDY_ifc_reportStateDbg, 1u);
      backing.PORT_RDY_ifc_reportStateDbg = PORT_RDY_ifc_reportStateDbg;
      vcd_write_val(sim_hdl, num++, PORT_RDY_portalIfc_indications_0_deq, 1u);
      backing.PORT_RDY_portalIfc_indications_0_deq = PORT_RDY_portalIfc_indications_0_deq;
      vcd_write_val(sim_hdl, num++, PORT_RDY_portalIfc_indications_0_first, 1u);
      backing.PORT_RDY_portalIfc_indications_0_first = PORT_RDY_portalIfc_indications_0_first;
      vcd_write_val(sim_hdl, num++, PORT_RDY_portalIfc_indications_0_notEmpty, 1u);
      backing.PORT_RDY_portalIfc_indications_0_notEmpty = PORT_RDY_portalIfc_indications_0_notEmpty;
      vcd_write_val(sim_hdl, num++, PORT_RDY_portalIfc_indications_1_deq, 1u);
      backing.PORT_RDY_portalIfc_indications_1_deq = PORT_RDY_portalIfc_indications_1_deq;
      vcd_write_val(sim_hdl, num++, PORT_RDY_portalIfc_indications_1_first, 1u);
      backing.PORT_RDY_portalIfc_indications_1_first = PORT_RDY_portalIfc_indications_1_first;
      vcd_write_val(sim_hdl, num++, PORT_RDY_portalIfc_indications_1_notEmpty, 1u);
      backing.PORT_RDY_portalIfc_indications_1_notEmpty = PORT_RDY_portalIfc_indications_1_notEmpty;
      vcd_write_val(sim_hdl, num++, PORT_RDY_portalIfc_indications_2_deq, 1u);
      backing.PORT_RDY_portalIfc_indications_2_deq = PORT_RDY_portalIfc_indications_2_deq;
      vcd_write_val(sim_hdl, num++, PORT_RDY_portalIfc_indications_2_first, 1u);
      backing.PORT_RDY_portalIfc_indications_2_first = PORT_RDY_portalIfc_indications_2_first;
      vcd_write_val(sim_hdl, num++, PORT_RDY_portalIfc_indications_2_notEmpty, 1u);
      backing.PORT_RDY_portalIfc_indications_2_notEmpty = PORT_RDY_portalIfc_indications_2_notEmpty;
      vcd_write_val(sim_hdl, num++, PORT_RDY_portalIfc_indications_3_deq, 1u);
      backing.PORT_RDY_portalIfc_indications_3_deq = PORT_RDY_portalIfc_indications_3_deq;
      vcd_write_val(sim_hdl, num++, PORT_RDY_portalIfc_indications_3_first, 1u);
      backing.PORT_RDY_portalIfc_indications_3_first = PORT_RDY_portalIfc_indications_3_first;
      vcd_write_val(sim_hdl, num++, PORT_RDY_portalIfc_indications_3_notEmpty, 1u);
      backing.PORT_RDY_portalIfc_indications_3_notEmpty = PORT_RDY_portalIfc_indications_3_notEmpty;
      vcd_write_val(sim_hdl, num++, PORT_RDY_portalIfc_intr_channel, 1u);
      backing.PORT_RDY_portalIfc_intr_channel = PORT_RDY_portalIfc_intr_channel;
      vcd_write_val(sim_hdl, num++, PORT_RDY_portalIfc_intr_status, 1u);
      backing.PORT_RDY_portalIfc_intr_status = PORT_RDY_portalIfc_intr_status;
      vcd_write_val(sim_hdl, num++, PORT_RDY_portalIfc_messageSize_size, 1u);
      backing.PORT_RDY_portalIfc_messageSize_size = PORT_RDY_portalIfc_messageSize_size;
      vcd_write_val(sim_hdl, num++, PORT_ifc_addrResponse_physAddr, 64u);
      backing.PORT_ifc_addrResponse_physAddr = PORT_ifc_addrResponse_physAddr;
      vcd_write_val(sim_hdl, num++, PORT_ifc_error_code, 32u);
      backing.PORT_ifc_error_code = PORT_ifc_error_code;
      vcd_write_val(sim_hdl, num++, PORT_ifc_error_extra, 64u);
      backing.PORT_ifc_error_extra = PORT_ifc_error_extra;
      vcd_write_val(sim_hdl, num++, PORT_ifc_error_offset, 64u);
      backing.PORT_ifc_error_offset = PORT_ifc_error_offset;
      vcd_write_val(sim_hdl, num++, PORT_ifc_error_sglId, 32u);
      backing.PORT_ifc_error_sglId = PORT_ifc_error_sglId;
      vcd_write_val(sim_hdl, num++, PORT_ifc_reportMemoryTraffic_words, 64u);
      backing.PORT_ifc_reportMemoryTraffic_words = PORT_ifc_reportMemoryTraffic_words;
      vcd_write_val(sim_hdl, num++, PORT_ifc_reportStateDbg_rec, 128u);
      backing.PORT_ifc_reportStateDbg_rec = PORT_ifc_reportStateDbg_rec;
      vcd_write_val(sim_hdl, num++, PORT_portalIfc_indications_0_first, 32u);
      backing.PORT_portalIfc_indications_0_first = PORT_portalIfc_indications_0_first;
      vcd_write_val(sim_hdl, num++, PORT_portalIfc_indications_0_notEmpty, 1u);
      backing.PORT_portalIfc_indications_0_notEmpty = PORT_portalIfc_indications_0_notEmpty;
      vcd_write_val(sim_hdl, num++, PORT_portalIfc_indications_1_first, 32u);
      backing.PORT_portalIfc_indications_1_first = PORT_portalIfc_indications_1_first;
      vcd_write_val(sim_hdl, num++, PORT_portalIfc_indications_1_notEmpty, 1u);
      backing.PORT_portalIfc_indications_1_notEmpty = PORT_portalIfc_indications_1_notEmpty;
      vcd_write_val(sim_hdl, num++, PORT_portalIfc_indications_2_first, 32u);
      backing.PORT_portalIfc_indications_2_first = PORT_portalIfc_indications_2_first;
      vcd_write_val(sim_hdl, num++, PORT_portalIfc_indications_2_notEmpty, 1u);
      backing.PORT_portalIfc_indications_2_notEmpty = PORT_portalIfc_indications_2_notEmpty;
      vcd_write_val(sim_hdl, num++, PORT_portalIfc_indications_3_first, 32u);
      backing.PORT_portalIfc_indications_3_first = PORT_portalIfc_indications_3_first;
      vcd_write_val(sim_hdl, num++, PORT_portalIfc_indications_3_notEmpty, 1u);
      backing.PORT_portalIfc_indications_3_notEmpty = PORT_portalIfc_indications_3_notEmpty;
      vcd_write_val(sim_hdl, num++, PORT_portalIfc_intr_channel, 32u);
      backing.PORT_portalIfc_intr_channel = PORT_portalIfc_intr_channel;
      vcd_write_val(sim_hdl, num++, PORT_portalIfc_intr_status, 1u);
      backing.PORT_portalIfc_intr_status = PORT_portalIfc_intr_status;
      vcd_write_val(sim_hdl, num++, PORT_portalIfc_messageSize_size, 16u);
      backing.PORT_portalIfc_messageSize_size = PORT_portalIfc_messageSize_size;
      vcd_write_val(sim_hdl, num++, PORT_portalIfc_messageSize_size_methodNumber, 16u);
      backing.PORT_portalIfc_messageSize_size_methodNumber = PORT_portalIfc_messageSize_size_methodNumber;
    }
}

void MOD_mkMemServerIndicationOutput::vcd_submodules(tVCDDumpType dt,
						     unsigned int levels,
						     MOD_mkMemServerIndicationOutput &backing)
{
  INST_indicationPipes.dump_VCD(dt, levels, backing.INST_indicationPipes);
}
